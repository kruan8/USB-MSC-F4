
USB-MSC-F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  20000000  080057ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001ae0  200000f0  080058dc  000200f0  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20001bd0  080058dc  00021bd0  2**0
                  ALLOC
  7 .ccmram       00001000  10000000  10000000  00030000  2**2
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000193db  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003117  00000000  00000000  000394fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a50  00000000  00000000  0003c618  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000900  00000000  00000000  0003d068  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006abb  00000000  00000000  0003d968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000041f5  00000000  00000000  00044423  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00048618  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002728  00000000  00000000  00048694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f0 	.word	0x200000f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057cc 	.word	0x080057cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000f4 	.word	0x200000f4
 80001c4:	080057cc 	.word	0x080057cc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <NVIC_PriorityGroupConfig+0x24>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ec:	60d3      	str	r3, [r2, #12]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000208:	2300      	movs	r3, #0
 800020a:	73fb      	strb	r3, [r7, #15]
 800020c:	2300      	movs	r3, #0
 800020e:	73bb      	strb	r3, [r7, #14]
 8000210:	230f      	movs	r3, #15
 8000212:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	78db      	ldrb	r3, [r3, #3]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d039      	beq.n	8000290 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800021c:	4b27      	ldr	r3, [pc, #156]	; (80002bc <NVIC_Init+0xbc>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	43db      	mvns	r3, r3
 8000222:	0a1b      	lsrs	r3, r3, #8
 8000224:	b2db      	uxtb	r3, r3
 8000226:	f003 0307 	and.w	r3, r3, #7
 800022a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	f1c3 0304 	rsb	r3, r3, #4
 8000232:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000234:	7b7a      	ldrb	r2, [r7, #13]
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	fa42 f303 	asr.w	r3, r2, r3
 800023c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	461a      	mov	r2, r3
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	fa02 f303 	lsl.w	r3, r2, r3
 800024a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	789a      	ldrb	r2, [r3, #2]
 8000250:	7b7b      	ldrb	r3, [r7, #13]
 8000252:	4013      	ands	r3, r2
 8000254:	b2da      	uxtb	r2, r3
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	4313      	orrs	r3, r2
 800025a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	011b      	lsls	r3, r3, #4
 8000260:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <NVIC_Init+0xc0>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4413      	add	r3, r2
 800026a:	7bfa      	ldrb	r2, [r7, #15]
 800026c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <NVIC_Init+0xc0>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	f003 031f 	and.w	r3, r3, #31
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800028a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800028e:	e00f      	b.n	80002b0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000290:	490b      	ldr	r1, [pc, #44]	; (80002c0 <NVIC_Init+0xc0>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	095b      	lsrs	r3, r3, #5
 8000298:	b2db      	uxtb	r3, r3
 800029a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	2201      	movs	r2, #1
 80002a6:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002a8:	f100 0320 	add.w	r3, r0, #32
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80002d0:	4b34      	ldr	r3, [pc, #208]	; (80003a4 <EXTI_Init+0xe0>)
 80002d2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	799b      	ldrb	r3, [r3, #6]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d04f      	beq.n	800037c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002dc:	4931      	ldr	r1, [pc, #196]	; (80003a4 <EXTI_Init+0xe0>)
 80002de:	4b31      	ldr	r3, [pc, #196]	; (80003a4 <EXTI_Init+0xe0>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	43db      	mvns	r3, r3
 80002e8:	4013      	ands	r3, r2
 80002ea:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002ec:	492d      	ldr	r1, [pc, #180]	; (80003a4 <EXTI_Init+0xe0>)
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <EXTI_Init+0xe0>)
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	43db      	mvns	r3, r3
 80002f8:	4013      	ands	r3, r2
 80002fa:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	6811      	ldr	r1, [r2, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	6812      	ldr	r2, [r2, #0]
 8000312:	430a      	orrs	r2, r1
 8000314:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000316:	4923      	ldr	r1, [pc, #140]	; (80003a4 <EXTI_Init+0xe0>)
 8000318:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <EXTI_Init+0xe0>)
 800031a:	689a      	ldr	r2, [r3, #8]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	43db      	mvns	r3, r3
 8000322:	4013      	ands	r3, r2
 8000324:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000326:	491f      	ldr	r1, [pc, #124]	; (80003a4 <EXTI_Init+0xe0>)
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <EXTI_Init+0xe0>)
 800032a:	68da      	ldr	r2, [r3, #12]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	43db      	mvns	r3, r3
 8000332:	4013      	ands	r3, r2
 8000334:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	795b      	ldrb	r3, [r3, #5]
 800033a:	2b10      	cmp	r3, #16
 800033c:	d10e      	bne.n	800035c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800033e:	4919      	ldr	r1, [pc, #100]	; (80003a4 <EXTI_Init+0xe0>)
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <EXTI_Init+0xe0>)
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4313      	orrs	r3, r2
 800034a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800034c:	4915      	ldr	r1, [pc, #84]	; (80003a4 <EXTI_Init+0xe0>)
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <EXTI_Init+0xe0>)
 8000350:	68da      	ldr	r2, [r3, #12]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4313      	orrs	r3, r2
 8000358:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800035a:	e01d      	b.n	8000398 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <EXTI_Init+0xe0>)
 800035e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	795b      	ldrb	r3, [r3, #5]
 8000364:	461a      	mov	r2, r3
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	4413      	add	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	6811      	ldr	r1, [r2, #0]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	430a      	orrs	r2, r1
 8000378:	601a      	str	r2, [r3, #0]
}
 800037a:	e00d      	b.n	8000398 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	791b      	ldrb	r3, [r3, #4]
 8000380:	461a      	mov	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4413      	add	r3, r2
 8000386:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	6812      	ldr	r2, [r2, #0]
 8000392:	43d2      	mvns	r2, r2
 8000394:	400a      	ands	r2, r1
 8000396:	601a      	str	r2, [r3, #0]
}
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40013c00 	.word	0x40013c00

080003a8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <EXTI_ClearITPendingBit+0x1c>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6153      	str	r3, [r2, #20]
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40013c00 	.word	0x40013c00

080003c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b087      	sub	sp, #28
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	e076      	b.n	80004d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003e4:	2201      	movs	r2, #1
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	4013      	ands	r3, r2
 80003f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d165      	bne.n	80004cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	2103      	movs	r1, #3
 800040a:	fa01 f303 	lsl.w	r3, r1, r3
 800040e:	43db      	mvns	r3, r3
 8000410:	401a      	ands	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	791b      	ldrb	r3, [r3, #4]
 800041e:	4619      	mov	r1, r3
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	431a      	orrs	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d003      	beq.n	800043e <GPIO_Init+0x76>
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d12e      	bne.n	800049c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	689a      	ldr	r2, [r3, #8]
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	2103      	movs	r1, #3
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	43db      	mvns	r3, r3
 800044e:	401a      	ands	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	689a      	ldr	r2, [r3, #8]
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	4619      	mov	r1, r3
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	431a      	orrs	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	b29b      	uxth	r3, r3
 8000474:	4619      	mov	r1, r3
 8000476:	2301      	movs	r3, #1
 8000478:	408b      	lsls	r3, r1
 800047a:	43db      	mvns	r3, r3
 800047c:	401a      	ands	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	7992      	ldrb	r2, [r2, #6]
 800048a:	4611      	mov	r1, r2
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	b292      	uxth	r2, r2
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	b292      	uxth	r2, r2
 8000496:	431a      	orrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2103      	movs	r1, #3
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	401a      	ands	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68da      	ldr	r2, [r3, #12]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	4619      	mov	r1, r3
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	fa01 f303 	lsl.w	r3, r1, r3
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3301      	adds	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	d985      	bls.n	80003e4 <GPIO_Init+0x1c>
    }
  }
}
 80004d8:	bf00      	nop
 80004da:	371c      	adds	r7, #28
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	807b      	strh	r3, [r7, #2]
 80004f0:	4613      	mov	r3, r2
 80004f2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004fc:	787a      	ldrb	r2, [r7, #1]
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	f003 0307 	and.w	r3, r3, #7
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800050c:	887b      	ldrh	r3, [r7, #2]
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	b29b      	uxth	r3, r3
 8000512:	4618      	mov	r0, r3
 8000514:	887b      	ldrh	r3, [r7, #2]
 8000516:	08db      	lsrs	r3, r3, #3
 8000518:	b29b      	uxth	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3208      	adds	r2, #8
 8000520:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	210f      	movs	r1, #15
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	ea02 0103 	and.w	r1, r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f100 0208 	add.w	r2, r0, #8
 800053e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	b29b      	uxth	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3208      	adds	r2, #8
 800054e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4313      	orrs	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000558:	887b      	ldrh	r3, [r7, #2]
 800055a:	08db      	lsrs	r3, r3, #3
 800055c:	b29b      	uxth	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3208      	adds	r2, #8
 8000564:	68b9      	ldr	r1, [r7, #8]
 8000566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <RCC_HSEConfig+0x24>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <RCC_HSEConfig+0x24>)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	7013      	strb	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023802 	.word	0x40023802

080005a0 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <RCC_PLLCmd+0x1c>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	42470060 	.word	0x42470060

080005c0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <RCC_SYSCLKConfig+0x34>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f023 0303 	bic.w	r3, r3, #3
 80005d8:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <RCC_SYSCLKConfig+0x34>)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6093      	str	r3, [r2, #8]
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40023800 	.word	0x40023800

080005f8 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <RCC_GetSYSCLKSource+0x1c>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 030c 	and.w	r3, r3, #12
 8000606:	b2db      	uxtb	r3, r3
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800062a:	490a      	ldr	r1, [pc, #40]	; (8000654 <RCC_AHB1PeriphClockCmd+0x3c>)
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <RCC_AHB1PeriphClockCmd+0x3c>)
 800062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000636:	e006      	b.n	8000646 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <RCC_AHB1PeriphClockCmd+0x3c>)
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <RCC_AHB1PeriphClockCmd+0x3c>)
 800063c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	43db      	mvns	r3, r3
 8000642:	4013      	ands	r3, r2
 8000644:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800066a:	490a      	ldr	r1, [pc, #40]	; (8000694 <RCC_AHB2PeriphClockCmd+0x3c>)
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <RCC_AHB2PeriphClockCmd+0x3c>)
 800066e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4313      	orrs	r3, r2
 8000674:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 8000676:	e006      	b.n	8000686 <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <RCC_AHB2PeriphClockCmd+0x3c>)
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <RCC_AHB2PeriphClockCmd+0x3c>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	43db      	mvns	r3, r3
 8000682:	4013      	ands	r3, r2
 8000684:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006aa:	490a      	ldr	r1, [pc, #40]	; (80006d4 <RCC_APB2PeriphClockCmd+0x3c>)
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <RCC_APB2PeriphClockCmd+0x3c>)
 80006ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006b6:	e006      	b.n	80006c6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006b8:	4906      	ldr	r1, [pc, #24]	; (80006d4 <RCC_APB2PeriphClockCmd+0x3c>)
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <RCC_APB2PeriphClockCmd+0x3c>)
 80006bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4013      	ands	r3, r2
 80006c4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80006ea:	490a      	ldr	r1, [pc, #40]	; (8000714 <RCC_APB1PeriphResetCmd+0x3c>)
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <RCC_APB1PeriphResetCmd+0x3c>)
 80006ee:	6a1a      	ldr	r2, [r3, #32]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80006f6:	e006      	b.n	8000706 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <RCC_APB1PeriphResetCmd+0x3c>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <RCC_APB1PeriphResetCmd+0x3c>)
 80006fc:	6a1a      	ldr	r2, [r3, #32]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	43db      	mvns	r3, r3
 8000702:	4013      	ands	r3, r2
 8000704:	620b      	str	r3, [r1, #32]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	095b      	lsrs	r3, r3, #5
 8000732:	b2db      	uxtb	r3, r3
 8000734:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d103      	bne.n	8000744 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <RCC_GetFlagStatus+0x70>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	e009      	b.n	8000758 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d103      	bne.n	8000752 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <RCC_GetFlagStatus+0x70>)
 800074c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	e002      	b.n	8000758 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <RCC_GetFlagStatus+0x70>)
 8000754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000756:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 031f 	and.w	r3, r3, #31
 800075e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	fa22 f303 	lsr.w	r3, r2, r3
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000770:	2301      	movs	r3, #1
 8000772:	74fb      	strb	r3, [r7, #19]
 8000774:	e001      	b.n	800077a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800077a:	7cfb      	ldrb	r3, [r7, #19]
}
 800077c:	4618      	mov	r0, r3
 800077e:	371c      	adds	r7, #28
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40023800 	.word	0x40023800

0800078c <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800078c:	b490      	push	{r4, r7}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	f003 0303 	and.w	r3, r3, #3
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	220f      	movs	r2, #15
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80007b0:	4916      	ldr	r1, [pc, #88]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	089b      	lsrs	r3, r3, #2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	3302      	adds	r3, #2
 80007c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	43db      	mvns	r3, r3
 80007cc:	401a      	ands	r2, r3
 80007ce:	1c83      	adds	r3, r0, #2
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	089b      	lsrs	r3, r3, #2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461c      	mov	r4, r3
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	3302      	adds	r3, #2
 80007e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ec:	79f9      	ldrb	r1, [r7, #7]
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	431a      	orrs	r2, r3
 80007fc:	1ca3      	adds	r3, r4, #2
 80007fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bc90      	pop	{r4, r7}
 800080a:	4770      	bx	lr
 800080c:	40013800 	.word	0x40013800

08000810 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USB_OTG_CORE_HANDLE  *pdev)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  MSC_BOT_State = BOT_IDLE;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MSC_BOT_Init+0x44>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
  MSC_BOT_Status = BOT_STATE_NORMAL;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MSC_BOT_Init+0x48>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
  USBD_STORAGE_fops->Init(0);
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MSC_BOT_Init+0x4c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2000      	movs	r0, #0
 800082c:	4798      	blx	r3
  
  DCD_EP_Flush(pdev, MSC_OUT_EP);
 800082e:	2101      	movs	r1, #1
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f003 fb4f 	bl	8003ed4 <DCD_EP_Flush>
  DCD_EP_Flush(pdev, MSC_IN_EP);
 8000836:	2181      	movs	r1, #129	; 0x81
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f003 fb4b 	bl	8003ed4 <DCD_EP_Flush>
  /* Prapare EP to Receive First BOT Cmd */
  DCD_EP_PrepareRx (pdev,
 800083e:	231f      	movs	r3, #31
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <MSC_BOT_Init+0x50>)
 8000842:	2101      	movs	r1, #1
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f003 fa4d 	bl	8003ce4 <DCD_EP_PrepareRx>
                    MSC_OUT_EP,
                    (uint8_t *)&MSC_BOT_cbw,
                    BOT_CBW_LENGTH);    
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20001558 	.word	0x20001558
 8000858:	20001524 	.word	0x20001524
 800085c:	200000d0 	.word	0x200000d0
 8000860:	20001528 	.word	0x20001528

08000864 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USB_OTG_CORE_HANDLE  *pdev)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  MSC_BOT_State = BOT_IDLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MSC_BOT_Reset+0x28>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
  MSC_BOT_Status = BOT_STATE_RECOVERY;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MSC_BOT_Reset+0x2c>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
  /* Prapare EP to Receive First BOT Cmd */
  DCD_EP_PrepareRx (pdev,
 8000878:	231f      	movs	r3, #31
 800087a:	4a06      	ldr	r2, [pc, #24]	; (8000894 <MSC_BOT_Reset+0x30>)
 800087c:	2101      	movs	r1, #1
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f003 fa30 	bl	8003ce4 <DCD_EP_PrepareRx>
                    MSC_OUT_EP,
                    (uint8_t *)&MSC_BOT_cbw,
                    BOT_CBW_LENGTH);    
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20001558 	.word	0x20001558
 8000890:	20001524 	.word	0x20001524
 8000894:	20001528 	.word	0x20001528

08000898 <MSC_BOT_DeInit>:
*         Uninitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USB_OTG_CORE_HANDLE  *pdev)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  MSC_BOT_State = BOT_IDLE;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <MSC_BOT_DeInit+0x1c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20001558 	.word	0x20001558

080008b8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USB_OTG_CORE_HANDLE  *pdev, 
                     uint8_t epnum)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
  
  switch (MSC_BOT_State)
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MSC_BOT_DataIn+0x54>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d004      	beq.n	80008d6 <MSC_BOT_DataIn+0x1e>
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	db16      	blt.n	80008fe <MSC_BOT_DataIn+0x46>
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	dc14      	bgt.n	80008fe <MSC_BOT_DataIn+0x46>
 80008d4:	e00e      	b.n	80008f4 <MSC_BOT_DataIn+0x3c>
  {
  case BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MSC_BOT_DataIn+0x58>)
 80008d8:	7b5b      	ldrb	r3, [r3, #13]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <MSC_BOT_DataIn+0x5c>)
 80008dc:	4619      	mov	r1, r3
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 fa7c 	bl	8000ddc <SCSI_ProcessCmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da0b      	bge.n	8000902 <MSC_BOT_DataIn+0x4a>
                        MSC_BOT_cbw.bLUN,
                        &MSC_BOT_cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, CSW_CMD_FAILED);
 80008ea:	2101      	movs	r1, #1
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f000 f8db 	bl	8000aa8 <MSC_BOT_SendCSW>
    }
    break;
 80008f2:	e006      	b.n	8000902 <MSC_BOT_DataIn+0x4a>
    
  case BOT_SEND_DATA:
  case BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, CSW_CMD_PASSED);
 80008f4:	2100      	movs	r1, #0
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f8d6 	bl	8000aa8 <MSC_BOT_SendCSW>
    
    break;
 80008fc:	e002      	b.n	8000904 <MSC_BOT_DataIn+0x4c>
    
  default:
    break;
 80008fe:	bf00      	nop
 8000900:	e000      	b.n	8000904 <MSC_BOT_DataIn+0x4c>
    break;
 8000902:	bf00      	nop
  }
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20001558 	.word	0x20001558
 8000910:	20001528 	.word	0x20001528
 8000914:	20001537 	.word	0x20001537

08000918 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USB_OTG_CORE_HANDLE  *pdev, 
                      uint8_t epnum)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
  switch (MSC_BOT_State)
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MSC_BOT_DataOut+0x48>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <MSC_BOT_DataOut+0x1a>
 800092c:	2b01      	cmp	r3, #1
 800092e:	d004      	beq.n	800093a <MSC_BOT_DataOut+0x22>
    }

    break;
    
  default:
    break;
 8000930:	e012      	b.n	8000958 <MSC_BOT_DataOut+0x40>
    MSC_BOT_CBW_Decode(pdev);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 f81a 	bl	800096c <MSC_BOT_CBW_Decode>
    break;
 8000938:	e00e      	b.n	8000958 <MSC_BOT_DataOut+0x40>
    if(SCSI_ProcessCmd(pdev,
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MSC_BOT_DataOut+0x4c>)
 800093c:	7b5b      	ldrb	r3, [r3, #13]
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <MSC_BOT_DataOut+0x50>)
 8000940:	4619      	mov	r1, r3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fa4a 	bl	8000ddc <SCSI_ProcessCmd>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	da03      	bge.n	8000956 <MSC_BOT_DataOut+0x3e>
      MSC_BOT_SendCSW (pdev, CSW_CMD_FAILED);
 800094e:	2101      	movs	r1, #1
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f8a9 	bl	8000aa8 <MSC_BOT_SendCSW>
    break;
 8000956:	bf00      	nop
  }
  
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20001558 	.word	0x20001558
 8000964:	20001528 	.word	0x20001528
 8000968:	20001537 	.word	0x20001537

0800096c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingtly  
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USB_OTG_CORE_HANDLE  *pdev)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  MSC_BOT_csw.dTag = MSC_BOT_cbw.dTag;
 8000974:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <MSC_BOT_CBW_Decode+0xcc>)
 800097a:	6053      	str	r3, [r2, #4]
  MSC_BOT_csw.dDataResidue = MSC_BOT_cbw.dDataLength;
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <MSC_BOT_CBW_Decode+0xcc>)
 8000982:	6093      	str	r3, [r2, #8]
  
  if ((USBD_GetRxCount (pdev ,MSC_OUT_EP) != BOT_CBW_LENGTH) ||
 8000984:	2101      	movs	r1, #1
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f001 fabe 	bl	8001f08 <USBD_GetRxCount>
 800098c:	4603      	mov	r3, r0
 800098e:	2b1f      	cmp	r3, #31
 8000990:	d110      	bne.n	80009b4 <MSC_BOT_CBW_Decode+0x48>
      (MSC_BOT_cbw.dSignature != BOT_CBW_SIGNATURE)||
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 8000994:	681b      	ldr	r3, [r3, #0]
  if ((USBD_GetRxCount (pdev ,MSC_OUT_EP) != BOT_CBW_LENGTH) ||
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <MSC_BOT_CBW_Decode+0xd0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d10b      	bne.n	80009b4 <MSC_BOT_CBW_Decode+0x48>
        (MSC_BOT_cbw.bLUN > 1) || 
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 800099e:	7b5b      	ldrb	r3, [r3, #13]
      (MSC_BOT_cbw.dSignature != BOT_CBW_SIGNATURE)||
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d807      	bhi.n	80009b4 <MSC_BOT_CBW_Decode+0x48>
          (MSC_BOT_cbw.bCBLength < 1) || 
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 80009a6:	7b9b      	ldrb	r3, [r3, #14]
        (MSC_BOT_cbw.bLUN > 1) || 
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d003      	beq.n	80009b4 <MSC_BOT_CBW_Decode+0x48>
            (MSC_BOT_cbw.bCBLength > 16))
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 80009ae:	7b9b      	ldrb	r3, [r3, #14]
          (MSC_BOT_cbw.bCBLength < 1) || 
 80009b0:	2b10      	cmp	r3, #16
 80009b2:	d90d      	bls.n	80009d0 <MSC_BOT_CBW_Decode+0x64>
  {
    
    SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 80009b6:	7b5b      	ldrb	r3, [r3, #13]
 80009b8:	2220      	movs	r2, #32
 80009ba:	2105      	movs	r1, #5
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fd29 	bl	8001414 <SCSI_SenseCode>
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
     MSC_BOT_Status = BOT_STATE_ERROR;   
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MSC_BOT_CBW_Decode+0xd4>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	701a      	strb	r2, [r3, #0]
    MSC_BOT_Abort(pdev);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 f895 	bl	8000af8 <MSC_BOT_Abort>
        MSC_BOT_SendCSW (pdev,
                         CSW_CMD_PASSED);
      }
    }
  }
}
 80009ce:	e02d      	b.n	8000a2c <MSC_BOT_CBW_Decode+0xc0>
    if(SCSI_ProcessCmd(pdev,
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MSC_BOT_CBW_Decode+0xc8>)
 80009d2:	7b5b      	ldrb	r3, [r3, #13]
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <MSC_BOT_CBW_Decode+0xd8>)
 80009d6:	4619      	mov	r1, r3
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f9ff 	bl	8000ddc <SCSI_ProcessCmd>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da03      	bge.n	80009ec <MSC_BOT_CBW_Decode+0x80>
      MSC_BOT_Abort(pdev);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f887 	bl	8000af8 <MSC_BOT_Abort>
}
 80009ea:	e01f      	b.n	8000a2c <MSC_BOT_CBW_Decode+0xc0>
    else if ((MSC_BOT_State != BOT_DATA_IN) && 
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MSC_BOT_CBW_Decode+0xdc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d01b      	beq.n	8000a2c <MSC_BOT_CBW_Decode+0xc0>
             (MSC_BOT_State != BOT_DATA_OUT) &&
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MSC_BOT_CBW_Decode+0xdc>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
    else if ((MSC_BOT_State != BOT_DATA_IN) && 
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d017      	beq.n	8000a2c <MSC_BOT_CBW_Decode+0xc0>
             (MSC_BOT_State != BOT_LAST_DATA_IN)) 
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MSC_BOT_CBW_Decode+0xdc>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
             (MSC_BOT_State != BOT_DATA_OUT) &&
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d013      	beq.n	8000a2c <MSC_BOT_CBW_Decode+0xc0>
      if (MSC_BOT_DataLen > 0)
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MSC_BOT_CBW_Decode+0xe0>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d007      	beq.n	8000a1c <MSC_BOT_CBW_Decode+0xb0>
        MSC_BOT_SendData(pdev,
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MSC_BOT_CBW_Decode+0xe0>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	490f      	ldr	r1, [pc, #60]	; (8000a50 <MSC_BOT_CBW_Decode+0xe4>)
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f81d 	bl	8000a54 <MSC_BOT_SendData>
}
 8000a1a:	e007      	b.n	8000a2c <MSC_BOT_CBW_Decode+0xc0>
      else if (MSC_BOT_DataLen == 0) 
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MSC_BOT_CBW_Decode+0xe0>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d103      	bne.n	8000a2c <MSC_BOT_CBW_Decode+0xc0>
        MSC_BOT_SendCSW (pdev,
 8000a24:	2100      	movs	r1, #0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f83e 	bl	8000aa8 <MSC_BOT_SendCSW>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20001528 	.word	0x20001528
 8000a38:	20001548 	.word	0x20001548
 8000a3c:	43425355 	.word	0x43425355
 8000a40:	20001524 	.word	0x20001524
 8000a44:	20001537 	.word	0x20001537
 8000a48:	20001558 	.word	0x20001558
 8000a4c:	2000155a 	.word	0x2000155a
 8000a50:	20000524 	.word	0x20000524

08000a54 <MSC_BOT_SendData>:
* @retval None
*/
static void  MSC_BOT_SendData(USB_OTG_CORE_HANDLE  *pdev,
                              uint8_t* buf, 
                              uint16_t len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	80fb      	strh	r3, [r7, #6]
  
  len = MIN (MSC_BOT_cbw.dDataLength, len);
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MSC_BOT_SendData+0x48>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	bf28      	it	cs
 8000a6c:	4613      	movcs	r3, r2
 8000a6e:	80fb      	strh	r3, [r7, #6]
  MSC_BOT_csw.dDataResidue -= len;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MSC_BOT_SendData+0x4c>)
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <MSC_BOT_SendData+0x4c>)
 8000a7a:	6093      	str	r3, [r2, #8]
  MSC_BOT_csw.bStatus = CSW_CMD_PASSED;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MSC_BOT_SendData+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	731a      	strb	r2, [r3, #12]
  MSC_BOT_State = BOT_SEND_DATA;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MSC_BOT_SendData+0x50>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_Tx (pdev, MSC_IN_EP, buf, len);  
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	2181      	movs	r1, #129	; 0x81
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f003 f96a 	bl	8003d68 <DCD_EP_Tx>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20001528 	.word	0x20001528
 8000aa0:	20001548 	.word	0x20001548
 8000aa4:	20001558 	.word	0x20001558

08000aa8 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USB_OTG_CORE_HANDLE  *pdev,
                              uint8_t CSW_Status)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_csw.dSignature = BOT_CSW_SIGNATURE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MSC_BOT_SendCSW+0x40>)
 8000ab6:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <MSC_BOT_SendCSW+0x44>)
 8000ab8:	601a      	str	r2, [r3, #0]
  MSC_BOT_csw.bStatus = CSW_Status;
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <MSC_BOT_SendCSW+0x40>)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	7313      	strb	r3, [r2, #12]
  MSC_BOT_State = BOT_IDLE;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MSC_BOT_SendCSW+0x48>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_Tx (pdev, 
 8000ac6:	230d      	movs	r3, #13
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <MSC_BOT_SendCSW+0x40>)
 8000aca:	2181      	movs	r1, #129	; 0x81
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f003 f94b 	bl	8003d68 <DCD_EP_Tx>
             MSC_IN_EP, 
             (uint8_t *)&MSC_BOT_csw, 
             BOT_CSW_LENGTH);
  
  /* Prapare EP to Receive next Cmd */
  DCD_EP_PrepareRx (pdev,
 8000ad2:	231f      	movs	r3, #31
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <MSC_BOT_SendCSW+0x4c>)
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f003 f903 	bl	8003ce4 <DCD_EP_PrepareRx>
                    MSC_OUT_EP,
                    (uint8_t *)&MSC_BOT_cbw, 
                    BOT_CBW_LENGTH);  
  
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20001548 	.word	0x20001548
 8000aec:	53425355 	.word	0x53425355
 8000af0:	20001558 	.word	0x20001558
 8000af4:	20001528 	.word	0x20001528

08000af8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USB_OTG_CORE_HANDLE  *pdev)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  if ((MSC_BOT_cbw.bmFlags == 0) && 
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MSC_BOT_Abort+0x4c>)
 8000b02:	7b1b      	ldrb	r3, [r3, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10b      	bne.n	8000b20 <MSC_BOT_Abort+0x28>
      (MSC_BOT_cbw.dDataLength != 0) &&
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MSC_BOT_Abort+0x4c>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
  if ((MSC_BOT_cbw.bmFlags == 0) && 
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d007      	beq.n	8000b20 <MSC_BOT_Abort+0x28>
      (MSC_BOT_Status == BOT_STATE_NORMAL) )
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MSC_BOT_Abort+0x50>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
      (MSC_BOT_cbw.dDataLength != 0) &&
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d103      	bne.n	8000b20 <MSC_BOT_Abort+0x28>
  {
    DCD_EP_Stall(pdev, MSC_OUT_EP );
 8000b18:	2101      	movs	r1, #1
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f003 f960 	bl	8003de0 <DCD_EP_Stall>
  }
  DCD_EP_Stall(pdev, MSC_IN_EP);
 8000b20:	2181      	movs	r1, #129	; 0x81
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f003 f95c 	bl	8003de0 <DCD_EP_Stall>
  
  if(MSC_BOT_Status == BOT_STATE_ERROR)
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MSC_BOT_Abort+0x50>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d105      	bne.n	8000b3c <MSC_BOT_Abort+0x44>
  {
    DCD_EP_PrepareRx (pdev,
 8000b30:	231f      	movs	r3, #31
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <MSC_BOT_Abort+0x4c>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f003 f8d4 	bl	8003ce4 <DCD_EP_PrepareRx>
                      MSC_OUT_EP,
                      (uint8_t *)&MSC_BOT_cbw, 
                      BOT_CBW_LENGTH);    
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20001528 	.word	0x20001528
 8000b48:	20001524 	.word	0x20001524

08000b4c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USB_OTG_CORE_HANDLE  *pdev, uint8_t epnum)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
  if(MSC_BOT_Status == BOT_STATE_ERROR )/* Bad CBW Signature */
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MSC_BOT_CplClrFeature+0x44>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d107      	bne.n	8000b70 <MSC_BOT_CplClrFeature+0x24>
  {
    DCD_EP_Stall(pdev, MSC_IN_EP);
 8000b60:	2181      	movs	r1, #129	; 0x81
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f003 f93c 	bl	8003de0 <DCD_EP_Stall>
    MSC_BOT_Status = BOT_STATE_NORMAL;    
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MSC_BOT_CplClrFeature+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
  else if(((epnum & 0x80) == 0x80) && ( MSC_BOT_Status != BOT_STATE_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, CSW_CMD_FAILED);
  }
  
}
 8000b6e:	e00b      	b.n	8000b88 <MSC_BOT_CplClrFeature+0x3c>
  else if(((epnum & 0x80) == 0x80) && ( MSC_BOT_Status != BOT_STATE_RECOVERY))
 8000b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da07      	bge.n	8000b88 <MSC_BOT_CplClrFeature+0x3c>
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <MSC_BOT_CplClrFeature+0x44>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d003      	beq.n	8000b88 <MSC_BOT_CplClrFeature+0x3c>
    MSC_BOT_SendCSW (pdev, CSW_CMD_FAILED);
 8000b80:	2101      	movs	r1, #1
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff90 	bl	8000aa8 <MSC_BOT_SendCSW>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20001524 	.word	0x20001524

08000b94 <USBD_MSC_Init>:
* @param  cfgidx: configuration index
* @retval status
*/
uint8_t  USBD_MSC_Init (void  *pdev, 
                            uint8_t cfgidx)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_DeInit(pdev , cfgidx );
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 f81c 	bl	8000be2 <USBD_MSC_DeInit>
  
  /* Open EP IN */
  DCD_EP_Open(pdev,
              MSC_IN_EP,
              MSC_EPIN_SIZE,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 8000bb0:	3316      	adds	r3, #22
  DCD_EP_Open(pdev,
 8000bb2:	881a      	ldrh	r2, [r3, #0]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	2181      	movs	r1, #129	; 0x81
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f002 ffff 	bl	8003bbc <DCD_EP_Open>
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
              MSC_OUT_EP,
              MSC_EPOUT_SIZE,
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 8000bc4:	331d      	adds	r3, #29
  DCD_EP_Open(pdev,
 8000bc6:	881a      	ldrh	r2, [r3, #0]
 8000bc8:	2302      	movs	r3, #2
 8000bca:	2101      	movs	r1, #1
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f002 fff5 	bl	8003bbc <DCD_EP_Open>
              USB_OTG_EP_BULK);
 
  /* Init the BOT  layer */
  MSC_BOT_Init(pdev); 
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fe1c 	bl	8000810 <MSC_BOT_Init>
  
  return USBD_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <USBD_MSC_DeInit>:
* @param  cfgidx: configuration index
* @retval status
*/
uint8_t  USBD_MSC_DeInit (void  *pdev, 
                              uint8_t cfgidx)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  DCD_EP_Close (pdev , MSC_IN_EP);
 8000bee:	2181      	movs	r1, #129	; 0x81
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f003 f83b 	bl	8003c6c <DCD_EP_Close>
  DCD_EP_Close (pdev , MSC_OUT_EP);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f003 f837 	bl	8003c6c <DCD_EP_Close>
  
  /* Un Init the BOT layer */
  MSC_BOT_DeInit(pdev);   
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fe4a 	bl	8000898 <MSC_BOT_DeInit>
  return USBD_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (void  *pdev, USB_SETUP_REQ *req)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d053      	beq.n	8000cce <USBD_MSC_Setup+0xbe>
 8000c26:	2b20      	cmp	r3, #32
 8000c28:	d000      	beq.n	8000c2c <USBD_MSC_Setup+0x1c>
      
    }  
    break;
   
  default:
    break;
 8000c2a:	e09a      	b.n	8000d62 <USBD_MSC_Setup+0x152>
    switch (req->bRequest)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2bfe      	cmp	r3, #254	; 0xfe
 8000c32:	d002      	beq.n	8000c3a <USBD_MSC_Setup+0x2a>
 8000c34:	2bff      	cmp	r3, #255	; 0xff
 8000c36:	d02c      	beq.n	8000c92 <USBD_MSC_Setup+0x82>
 8000c38:	e042      	b.n	8000cc0 <USBD_MSC_Setup+0xb0>
      if((req->wValue  == 0) && 
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	885b      	ldrh	r3, [r3, #2]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d121      	bne.n	8000c86 <USBD_MSC_Setup+0x76>
         (req->wLength == 1) &&
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d11d      	bne.n	8000c86 <USBD_MSC_Setup+0x76>
         ((req->bmRequest & 0x80) == 0x80))
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
         (req->wLength == 1) &&
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da18      	bge.n	8000c86 <USBD_MSC_Setup+0x76>
        USBD_MSC_MaxLun = USBD_STORAGE_fops->GetMaxLun();
 8000c54:	4b45      	ldr	r3, [pc, #276]	; (8000d6c <USBD_MSC_Setup+0x15c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4798      	blx	r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <USBD_MSC_Setup+0x160>)
 8000c62:	701a      	strb	r2, [r3, #0]
        if(USBD_MSC_MaxLun > 0)
 8000c64:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <USBD_MSC_Setup+0x160>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <USBD_MSC_Setup+0x6a>
           USBD_CtlSendData (pdev,
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4940      	ldr	r1, [pc, #256]	; (8000d70 <USBD_MSC_Setup+0x160>)
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f001 f8d1 	bl	8001e18 <USBD_CtlSendData>
        if(USBD_MSC_MaxLun > 0)
 8000c76:	bf00      	nop
      break;
 8000c78:	e028      	b.n	8000ccc <USBD_MSC_Setup+0xbc>
          USBD_CtlError(pdev , req);
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f001 fd7a 	bl	8002776 <USBD_CtlError>
          return USBD_FAIL; 
 8000c82:	2302      	movs	r3, #2
 8000c84:	e06e      	b.n	8000d64 <USBD_MSC_Setup+0x154>
         USBD_CtlError(pdev , req);
 8000c86:	6839      	ldr	r1, [r7, #0]
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f001 fd74 	bl	8002776 <USBD_CtlError>
         return USBD_FAIL; 
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e068      	b.n	8000d64 <USBD_MSC_Setup+0x154>
      if((req->wValue  == 0) && 
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	885b      	ldrh	r3, [r3, #2]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10c      	bne.n	8000cb4 <USBD_MSC_Setup+0xa4>
         (req->wLength == 0) &&
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d108      	bne.n	8000cb4 <USBD_MSC_Setup+0xa4>
        ((req->bmRequest & 0x80) != 0x80))
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b25b      	sxtb	r3, r3
         (req->wLength == 0) &&
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db03      	blt.n	8000cb4 <USBD_MSC_Setup+0xa4>
         MSC_BOT_Reset(pdev);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fdd9 	bl	8000864 <MSC_BOT_Reset>
      break;
 8000cb2:	e00b      	b.n	8000ccc <USBD_MSC_Setup+0xbc>
         USBD_CtlError(pdev , req);
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f001 fd5d 	bl	8002776 <USBD_CtlError>
         return USBD_FAIL; 
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e051      	b.n	8000d64 <USBD_MSC_Setup+0x154>
       USBD_CtlError(pdev , req);
 8000cc0:	6839      	ldr	r1, [r7, #0]
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f001 fd57 	bl	8002776 <USBD_CtlError>
       return USBD_FAIL; 
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e04b      	b.n	8000d64 <USBD_MSC_Setup+0x154>
    break;
 8000ccc:	e049      	b.n	8000d62 <USBD_MSC_Setup+0x152>
    switch (req->bRequest)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d004      	beq.n	8000ce0 <USBD_MSC_Setup+0xd0>
 8000cd6:	2b0b      	cmp	r3, #11
 8000cd8:	d008      	beq.n	8000cec <USBD_MSC_Setup+0xdc>
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d00c      	beq.n	8000cf8 <USBD_MSC_Setup+0xe8>
    break;
 8000cde:	e03f      	b.n	8000d60 <USBD_MSC_Setup+0x150>
      USBD_CtlSendData (pdev,
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4924      	ldr	r1, [pc, #144]	; (8000d74 <USBD_MSC_Setup+0x164>)
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f001 f897 	bl	8001e18 <USBD_CtlSendData>
      break;
 8000cea:	e039      	b.n	8000d60 <USBD_MSC_Setup+0x150>
      USBD_MSC_AltSet = (uint8_t)(req->wValue);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	885b      	ldrh	r3, [r3, #2]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <USBD_MSC_Setup+0x164>)
 8000cf4:	701a      	strb	r2, [r3, #0]
      break;
 8000cf6:	e033      	b.n	8000d60 <USBD_MSC_Setup+0x150>
      DCD_EP_Flush(pdev, (uint8_t)req->wIndex);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	889b      	ldrh	r3, [r3, #4]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4619      	mov	r1, r3
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f003 f8e7 	bl	8003ed4 <DCD_EP_Flush>
      DCD_EP_Close (pdev , (uint8_t)req->wIndex);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	889b      	ldrh	r3, [r3, #4]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f002 ffac 	bl	8003c6c <DCD_EP_Close>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	889b      	ldrh	r3, [r3, #4]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da0c      	bge.n	8000d38 <USBD_MSC_Setup+0x128>
                    ((uint8_t)req->wIndex),
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	889b      	ldrh	r3, [r3, #4]
        DCD_EP_Open(pdev,
 8000d22:	b2d9      	uxtb	r1, r3
                    MSC_EPIN_SIZE,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 8000d2a:	3316      	adds	r3, #22
        DCD_EP_Open(pdev,
 8000d2c:	881a      	ldrh	r2, [r3, #0]
 8000d2e:	2302      	movs	r3, #2
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f002 ff43 	bl	8003bbc <DCD_EP_Open>
 8000d36:	e00b      	b.n	8000d50 <USBD_MSC_Setup+0x140>
                    ((uint8_t)req->wIndex),
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	889b      	ldrh	r3, [r3, #4]
        DCD_EP_Open(pdev,
 8000d3c:	b2d9      	uxtb	r1, r3
                    MSC_EPOUT_SIZE,
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f8d3 35f0 	ldr.w	r3, [r3, #1520]	; 0x5f0
 8000d44:	331d      	adds	r3, #29
        DCD_EP_Open(pdev,
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f002 ff36 	bl	8003bbc <DCD_EP_Open>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fef7 	bl	8000b4c <MSC_BOT_CplClrFeature>
      break;
 8000d5e:	bf00      	nop
    break;
 8000d60:	bf00      	nop
  }
  return USBD_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000d0 	.word	0x200000d0
 8000d70:	2000010c 	.word	0x2000010c
 8000d74:	2000010d 	.word	0x2000010d

08000d78 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (void  *pdev, 
                              uint8_t epnum)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	4619      	mov	r1, r3
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fd95 	bl	80008b8 <MSC_BOT_DataIn>
  return USBD_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (void  *pdev, 
                               uint8_t epnum)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fdb5 	bl	8000918 <MSC_BOT_DataOut>
  return USBD_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <USBD_MSC_GetCfgDesc>:
* @param  speed : current device speed
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (USBD_MSC_CfgDesc);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <USBD_MSC_GetCfgDesc+0x20>)
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	20000000 	.word	0x20000000

08000ddc <SCSI_ProcessCmd>:
* @retval status
*/
int8_t SCSI_ProcessCmd(USB_OTG_CORE_HANDLE  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	460b      	mov	r3, r1
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	72fb      	strb	r3, [r7, #11]
  cdev = pdev;
 8000dea:	4a90      	ldr	r2, [pc, #576]	; (800102c <SCSI_ProcessCmd+0x250>)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6013      	str	r3, [r2, #0]
  
  switch (params[0])
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b5a      	cmp	r3, #90	; 0x5a
 8000df6:	f200 810d 	bhi.w	8001014 <SCSI_ProcessCmd+0x238>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <SCSI_ProcessCmd+0x24>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000f6d 	.word	0x08000f6d
 8000e04:	08001015 	.word	0x08001015
 8000e08:	08001015 	.word	0x08001015
 8000e0c:	08000f7b 	.word	0x08000f7b
 8000e10:	08001015 	.word	0x08001015
 8000e14:	08001015 	.word	0x08001015
 8000e18:	08001015 	.word	0x08001015
 8000e1c:	08001015 	.word	0x08001015
 8000e20:	08001015 	.word	0x08001015
 8000e24:	08001015 	.word	0x08001015
 8000e28:	08001015 	.word	0x08001015
 8000e2c:	08001015 	.word	0x08001015
 8000e30:	08001015 	.word	0x08001015
 8000e34:	08001015 	.word	0x08001015
 8000e38:	08001015 	.word	0x08001015
 8000e3c:	08001015 	.word	0x08001015
 8000e40:	08001015 	.word	0x08001015
 8000e44:	08001015 	.word	0x08001015
 8000e48:	08000f89 	.word	0x08000f89
 8000e4c:	08001015 	.word	0x08001015
 8000e50:	08001015 	.word	0x08001015
 8000e54:	08001015 	.word	0x08001015
 8000e58:	08001015 	.word	0x08001015
 8000e5c:	08001015 	.word	0x08001015
 8000e60:	08001015 	.word	0x08001015
 8000e64:	08001015 	.word	0x08001015
 8000e68:	08000fb3 	.word	0x08000fb3
 8000e6c:	08000f97 	.word	0x08000f97
 8000e70:	08001015 	.word	0x08001015
 8000e74:	08001015 	.word	0x08001015
 8000e78:	08000fa5 	.word	0x08000fa5
 8000e7c:	08001015 	.word	0x08001015
 8000e80:	08001015 	.word	0x08001015
 8000e84:	08001015 	.word	0x08001015
 8000e88:	08001015 	.word	0x08001015
 8000e8c:	08000fcf 	.word	0x08000fcf
 8000e90:	08001015 	.word	0x08001015
 8000e94:	08000fdd 	.word	0x08000fdd
 8000e98:	08001015 	.word	0x08001015
 8000e9c:	08001015 	.word	0x08001015
 8000ea0:	08000feb 	.word	0x08000feb
 8000ea4:	08001015 	.word	0x08001015
 8000ea8:	08000ff9 	.word	0x08000ff9
 8000eac:	08001015 	.word	0x08001015
 8000eb0:	08001015 	.word	0x08001015
 8000eb4:	08001015 	.word	0x08001015
 8000eb8:	08001015 	.word	0x08001015
 8000ebc:	08001007 	.word	0x08001007
 8000ec0:	08001015 	.word	0x08001015
 8000ec4:	08001015 	.word	0x08001015
 8000ec8:	08001015 	.word	0x08001015
 8000ecc:	08001015 	.word	0x08001015
 8000ed0:	08001015 	.word	0x08001015
 8000ed4:	08001015 	.word	0x08001015
 8000ed8:	08001015 	.word	0x08001015
 8000edc:	08001015 	.word	0x08001015
 8000ee0:	08001015 	.word	0x08001015
 8000ee4:	08001015 	.word	0x08001015
 8000ee8:	08001015 	.word	0x08001015
 8000eec:	08001015 	.word	0x08001015
 8000ef0:	08001015 	.word	0x08001015
 8000ef4:	08001015 	.word	0x08001015
 8000ef8:	08001015 	.word	0x08001015
 8000efc:	08001015 	.word	0x08001015
 8000f00:	08001015 	.word	0x08001015
 8000f04:	08001015 	.word	0x08001015
 8000f08:	08001015 	.word	0x08001015
 8000f0c:	08001015 	.word	0x08001015
 8000f10:	08001015 	.word	0x08001015
 8000f14:	08001015 	.word	0x08001015
 8000f18:	08001015 	.word	0x08001015
 8000f1c:	08001015 	.word	0x08001015
 8000f20:	08001015 	.word	0x08001015
 8000f24:	08001015 	.word	0x08001015
 8000f28:	08001015 	.word	0x08001015
 8000f2c:	08001015 	.word	0x08001015
 8000f30:	08001015 	.word	0x08001015
 8000f34:	08001015 	.word	0x08001015
 8000f38:	08001015 	.word	0x08001015
 8000f3c:	08001015 	.word	0x08001015
 8000f40:	08001015 	.word	0x08001015
 8000f44:	08001015 	.word	0x08001015
 8000f48:	08001015 	.word	0x08001015
 8000f4c:	08001015 	.word	0x08001015
 8000f50:	08001015 	.word	0x08001015
 8000f54:	08001015 	.word	0x08001015
 8000f58:	08001015 	.word	0x08001015
 8000f5c:	08001015 	.word	0x08001015
 8000f60:	08001015 	.word	0x08001015
 8000f64:	08001015 	.word	0x08001015
 8000f68:	08000fc1 	.word	0x08000fc1
  {
  case SCSI_TEST_UNIT_READY:
    return SCSI_TestUnitReady(lun, params);
 8000f6c:	7afb      	ldrb	r3, [r7, #11]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f85d 	bl	8001030 <SCSI_TestUnitReady>
 8000f76:	4603      	mov	r3, r0
 8000f78:	e054      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_REQUEST_SENSE:
    return SCSI_RequestSense (lun, params);
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f9e4 	bl	800134c <SCSI_RequestSense>
 8000f84:	4603      	mov	r3, r0
 8000f86:	e04d      	b.n	8001024 <SCSI_ProcessCmd+0x248>
  case SCSI_INQUIRY:
    return SCSI_Inquiry(lun, params);
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 f883 	bl	8001098 <SCSI_Inquiry>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e046      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_START_STOP_UNIT:
    return SCSI_StartStopUnit(lun, params);
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fa6c 	bl	8001478 <SCSI_StartStopUnit>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	e03f      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_ALLOW_MEDIUM_REMOVAL:
    return SCSI_StartStopUnit(lun, params);
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fa65 	bl	8001478 <SCSI_StartStopUnit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e038      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_MODE_SENSE6:
    return SCSI_ModeSense6 (lun, params);
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f97c 	bl	80012b4 <SCSI_ModeSense6>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	e031      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_MODE_SENSE10:
    return SCSI_ModeSense10 (lun, params);
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f99b 	bl	8001300 <SCSI_ModeSense10>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	e02a      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_READ_FORMAT_CAPACITIES:
    return SCSI_ReadFormatCapacity(lun, params);
 8000fce:	7afb      	ldrb	r3, [r7, #11]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f90c 	bl	80011f0 <SCSI_ReadFormatCapacity>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	e023      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_READ_CAPACITY10:
    return SCSI_ReadCapacity10(lun, params);
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f8a7 	bl	8001134 <SCSI_ReadCapacity10>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	e01c      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_READ10:
    return SCSI_Read10(lun, params); 
 8000fea:	7afb      	ldrb	r3, [r7, #11]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fa54 	bl	800149c <SCSI_Read10>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	e015      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_WRITE10:
    return SCSI_Write10(lun, params);
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fae5 	bl	80015cc <SCSI_Write10>
 8001002:	4603      	mov	r3, r0
 8001004:	e00e      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  case SCSI_VERIFY10:
    return SCSI_Verify10(lun, params);
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fb98 	bl	8001740 <SCSI_Verify10>
 8001010:	4603      	mov	r3, r0
 8001012:	e007      	b.n	8001024 <SCSI_ProcessCmd+0x248>
    
  default:
    SCSI_SenseCode(lun,
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	2220      	movs	r2, #32
 8001018:	2105      	movs	r1, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f9fa 	bl	8001414 <SCSI_SenseCode>
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);    
    return -1;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20001590 	.word	0x20001590

08001030 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(uint8_t lun, uint8_t *params)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  
  /* case 9 : Hi > D0 */
  if (MSC_BOT_cbw.dDataLength != 0)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <SCSI_TestUnitReady+0x5c>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <SCSI_TestUnitReady+0x28>
  {
    SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <SCSI_TestUnitReady+0x5c>)
 8001046:	7b5b      	ldrb	r3, [r3, #13]
 8001048:	2220      	movs	r2, #32
 800104a:	2105      	movs	r1, #5
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f9e1 	bl	8001414 <SCSI_SenseCode>
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e015      	b.n	8001084 <SCSI_TestUnitReady+0x54>
  }  
  
  if(USBD_STORAGE_fops->IsReady(lun) !=0 )
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <SCSI_TestUnitReady+0x60>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	4610      	mov	r0, r2
 8001062:	4798      	blx	r3
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d008      	beq.n	800107c <SCSI_TestUnitReady+0x4c>
  {
    SCSI_SenseCode(lun,
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	223a      	movs	r2, #58	; 0x3a
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f9cf 	bl	8001414 <SCSI_SenseCode>
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e003      	b.n	8001084 <SCSI_TestUnitReady+0x54>
  } 
  MSC_BOT_DataLen = 0;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SCSI_TestUnitReady+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
  return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20001528 	.word	0x20001528
 8001090:	200000d0 	.word	0x200000d0
 8001094:	2000155a 	.word	0x2000155a

08001098 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(uint8_t lun, uint8_t *params)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  uint8_t* pPage;
  uint16_t len;
  
  if (params[1] & 0x01)/*Evpd is set*/
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <SCSI_Inquiry+0x24>
  {
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <SCSI_Inquiry+0x8c>)
 80010b4:	60fb      	str	r3, [r7, #12]
    len = LENGTH_INQUIRY_PAGE00;
 80010b6:	2307      	movs	r3, #7
 80010b8:	817b      	strh	r3, [r7, #10]
 80010ba:	e01a      	b.n	80010f2 <SCSI_Inquiry+0x5a>
  }
  else
  {
    
    pPage = (uint8_t *)&USBD_STORAGE_fops->pInquiry[lun * USBD_STD_INQUIRY_LENGTH];
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <SCSI_Inquiry+0x90>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	69d9      	ldr	r1, [r3, #28]
 80010c2:	79fa      	ldrb	r2, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	60fb      	str	r3, [r7, #12]
    len = pPage[4] + 5;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3304      	adds	r3, #4
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3305      	adds	r3, #5
 80010da:	817b      	strh	r3, [r7, #10]
    
    if (params[4] <= len)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	3304      	adds	r3, #4
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	897a      	ldrh	r2, [r7, #10]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d303      	bcc.n	80010f2 <SCSI_Inquiry+0x5a>
    {
      len = params[4];
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	3304      	adds	r3, #4
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	817b      	strh	r3, [r7, #10]
    }
  }
  MSC_BOT_DataLen = len;
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <SCSI_Inquiry+0x94>)
 80010f4:	897b      	ldrh	r3, [r7, #10]
 80010f6:	8013      	strh	r3, [r2, #0]
  
  while (len) 
 80010f8:	e009      	b.n	800110e <SCSI_Inquiry+0x76>
  {
    len--;
 80010fa:	897b      	ldrh	r3, [r7, #10]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	817b      	strh	r3, [r7, #10]
    MSC_BOT_Data[len] = pPage[len];
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	897a      	ldrh	r2, [r7, #10]
 8001104:	68f9      	ldr	r1, [r7, #12]
 8001106:	440a      	add	r2, r1
 8001108:	7811      	ldrb	r1, [r2, #0]
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <SCSI_Inquiry+0x98>)
 800110c:	54d1      	strb	r1, [r2, r3]
  while (len) 
 800110e:	897b      	ldrh	r3, [r7, #10]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f2      	bne.n	80010fa <SCSI_Inquiry+0x62>
  }
  return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	0800552c 	.word	0x0800552c
 8001128:	200000d0 	.word	0x200000d0
 800112c:	2000155a 	.word	0x2000155a
 8001130:	20000524 	.word	0x20000524

08001134 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(uint8_t lun, uint8_t *params)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  
  if(USBD_STORAGE_fops->GetCapacity(lun, &SCSI_blk_nbr, &SCSI_blk_size) != 0)
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <SCSI_ReadCapacity10+0xa8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	79f8      	ldrb	r0, [r7, #7]
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <SCSI_ReadCapacity10+0xac>)
 800114a:	4926      	ldr	r1, [pc, #152]	; (80011e4 <SCSI_ReadCapacity10+0xb0>)
 800114c:	4798      	blx	r3
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <SCSI_ReadCapacity10+0x32>
  {
    SCSI_SenseCode(lun,
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	223a      	movs	r2, #58	; 0x3a
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f95a 	bl	8001414 <SCSI_SenseCode>
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	e036      	b.n	80011d4 <SCSI_ReadCapacity10+0xa0>
  } 
  else
  {
    
    MSC_BOT_Data[0] = (uint8_t)((SCSI_blk_nbr - 1) >> 24);
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <SCSI_ReadCapacity10+0xb0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	0e1b      	lsrs	r3, r3, #24
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 8001172:	701a      	strb	r2, [r3, #0]
    MSC_BOT_Data[1] = (uint8_t)((SCSI_blk_nbr - 1) >> 16);
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <SCSI_ReadCapacity10+0xb0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	0c1b      	lsrs	r3, r3, #16
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 8001180:	705a      	strb	r2, [r3, #1]
    MSC_BOT_Data[2] = (uint8_t)((SCSI_blk_nbr - 1) >>  8);
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <SCSI_ReadCapacity10+0xb0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 800118e:	709a      	strb	r2, [r3, #2]
    MSC_BOT_Data[3] = (uint8_t)(SCSI_blk_nbr - 1);
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <SCSI_ReadCapacity10+0xb0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3b01      	subs	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 800119c:	70da      	strb	r2, [r3, #3]
    
    MSC_BOT_Data[4] = (uint8_t)(SCSI_blk_size >>  24);
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <SCSI_ReadCapacity10+0xac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0e1b      	lsrs	r3, r3, #24
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 80011a8:	711a      	strb	r2, [r3, #4]
    MSC_BOT_Data[5] = (uint8_t)(SCSI_blk_size >>  16);
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <SCSI_ReadCapacity10+0xac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0c1b      	lsrs	r3, r3, #16
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 80011b4:	715a      	strb	r2, [r3, #5]
    MSC_BOT_Data[6] = (uint8_t)(SCSI_blk_size >>  8);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <SCSI_ReadCapacity10+0xac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 80011c0:	719a      	strb	r2, [r3, #6]
    MSC_BOT_Data[7] = (uint8_t)(SCSI_blk_size);
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <SCSI_ReadCapacity10+0xac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <SCSI_ReadCapacity10+0xb4>)
 80011ca:	71da      	strb	r2, [r3, #7]
    
    MSC_BOT_DataLen = 8;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <SCSI_ReadCapacity10+0xb8>)
 80011ce:	2208      	movs	r2, #8
 80011d0:	801a      	strh	r2, [r3, #0]
    return 0;
 80011d2:	2300      	movs	r3, #0
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000d0 	.word	0x200000d0
 80011e0:	20001560 	.word	0x20001560
 80011e4:	2000155c 	.word	0x2000155c
 80011e8:	20000524 	.word	0x20000524
 80011ec:	2000155a 	.word	0x2000155a

080011f0 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(uint8_t lun, uint8_t *params)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  
  uint32_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  
  for(i=0 ; i < 12 ; i++) 
 80011fc:	2300      	movs	r3, #0
 80011fe:	82fb      	strh	r3, [r7, #22]
 8001200:	e006      	b.n	8001210 <SCSI_ReadFormatCapacity+0x20>
  {
    MSC_BOT_Data[i] = 0;
 8001202:	8afb      	ldrh	r3, [r7, #22]
 8001204:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001206:	2100      	movs	r1, #0
 8001208:	54d1      	strb	r1, [r2, r3]
  for(i=0 ; i < 12 ; i++) 
 800120a:	8afb      	ldrh	r3, [r7, #22]
 800120c:	3301      	adds	r3, #1
 800120e:	82fb      	strh	r3, [r7, #22]
 8001210:	8afb      	ldrh	r3, [r7, #22]
 8001212:	2b0b      	cmp	r3, #11
 8001214:	d9f5      	bls.n	8001202 <SCSI_ReadFormatCapacity+0x12>
  }
  
  if(USBD_STORAGE_fops->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <SCSI_ReadFormatCapacity+0xbc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	f107 010c 	add.w	r1, r7, #12
 8001224:	79f8      	ldrb	r0, [r7, #7]
 8001226:	4798      	blx	r3
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <SCSI_ReadFormatCapacity+0x50>
  {
    SCSI_SenseCode(lun,
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	223a      	movs	r2, #58	; 0x3a
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f8ed 	bl	8001414 <SCSI_SenseCode>
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e02f      	b.n	80012a0 <SCSI_ReadFormatCapacity+0xb0>
  } 
  else
  {
    MSC_BOT_Data[3] = 0x08;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001242:	2208      	movs	r2, #8
 8001244:	70da      	strb	r2, [r3, #3]
    MSC_BOT_Data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3b01      	subs	r3, #1
 800124a:	0e1b      	lsrs	r3, r3, #24
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001250:	711a      	strb	r2, [r3, #4]
    MSC_BOT_Data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	0c1b      	lsrs	r3, r3, #16
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 800125c:	715a      	strb	r2, [r3, #5]
    MSC_BOT_Data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3b01      	subs	r3, #1
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001268:	719a      	strb	r2, [r3, #6]
    MSC_BOT_Data[7] = (uint8_t)(blk_nbr - 1);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3b01      	subs	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001274:	71da      	strb	r2, [r3, #7]
    
    MSC_BOT_Data[8] = 0x02;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001278:	2202      	movs	r2, #2
 800127a:	721a      	strb	r2, [r3, #8]
    MSC_BOT_Data[9] = (uint8_t)(blk_size >>  16);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001284:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Data[10] = (uint8_t)(blk_size >>  8);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 800128e:	729a      	strb	r2, [r3, #10]
    MSC_BOT_Data[11] = (uint8_t)(blk_size);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SCSI_ReadFormatCapacity+0xb8>)
 8001296:	72da      	strb	r2, [r3, #11]
    
    MSC_BOT_DataLen = 12;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SCSI_ReadFormatCapacity+0xc0>)
 800129a:	220c      	movs	r2, #12
 800129c:	801a      	strh	r2, [r3, #0]
    return 0;
 800129e:	2300      	movs	r3, #0
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000524 	.word	0x20000524
 80012ac:	200000d0 	.word	0x200000d0
 80012b0:	2000155a 	.word	0x2000155a

080012b4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (uint8_t lun, uint8_t *params)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  
  uint16_t len = 8 ;
 80012c0:	2308      	movs	r3, #8
 80012c2:	81fb      	strh	r3, [r7, #14]
  MSC_BOT_DataLen = len;
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <SCSI_ModeSense6+0x40>)
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	8013      	strh	r3, [r2, #0]
  
  while (len) 
 80012ca:	e008      	b.n	80012de <SCSI_ModeSense6+0x2a>
  {
    len--;
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	81fb      	strh	r3, [r7, #14]
    MSC_BOT_Data[len] = MSC_Mode_Sense6_data[len];
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	89fa      	ldrh	r2, [r7, #14]
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <SCSI_ModeSense6+0x44>)
 80012d8:	5c89      	ldrb	r1, [r1, r2]
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <SCSI_ModeSense6+0x48>)
 80012dc:	54d1      	strb	r1, [r2, r3]
  while (len) 
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f3      	bne.n	80012cc <SCSI_ModeSense6+0x18>
  }
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2000155a 	.word	0x2000155a
 80012f8:	08005534 	.word	0x08005534
 80012fc:	20000524 	.word	0x20000524

08001300 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (uint8_t lun, uint8_t *params)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
 uint16_t len = 8;
 800130c:	2308      	movs	r3, #8
 800130e:	81fb      	strh	r3, [r7, #14]

 MSC_BOT_DataLen = len;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <SCSI_ModeSense10+0x40>)
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	8013      	strh	r3, [r2, #0]

 while (len) 
 8001316:	e008      	b.n	800132a <SCSI_ModeSense10+0x2a>
  {
    len--;
 8001318:	89fb      	ldrh	r3, [r7, #14]
 800131a:	3b01      	subs	r3, #1
 800131c:	81fb      	strh	r3, [r7, #14]
    MSC_BOT_Data[len] = MSC_Mode_Sense10_data[len];
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	89fa      	ldrh	r2, [r7, #14]
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <SCSI_ModeSense10+0x44>)
 8001324:	5c89      	ldrb	r1, [r1, r2]
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <SCSI_ModeSense10+0x48>)
 8001328:	54d1      	strb	r1, [r2, r3]
 while (len) 
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f3      	bne.n	8001318 <SCSI_ModeSense10+0x18>
  }
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000155a 	.word	0x2000155a
 8001344:	0800553c 	.word	0x0800553c
 8001348:	20000524 	.word	0x20000524

0800134c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (uint8_t lun, uint8_t *params)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e006      	b.n	800136c <SCSI_RequestSense+0x20>
  {
    MSC_BOT_Data[i] = 0;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <SCSI_RequestSense+0xb4>)
 8001362:	2100      	movs	r1, #0
 8001364:	54d1      	strb	r1, [r2, r3]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3301      	adds	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b11      	cmp	r3, #17
 8001370:	d9f5      	bls.n	800135e <SCSI_RequestSense+0x12>
  }
  
  MSC_BOT_Data[0]	= 0x70;		
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <SCSI_RequestSense+0xb4>)
 8001374:	2270      	movs	r2, #112	; 0x70
 8001376:	701a      	strb	r2, [r3, #0]
  MSC_BOT_Data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <SCSI_RequestSense+0xb4>)
 800137a:	220c      	movs	r2, #12
 800137c:	71da      	strb	r2, [r3, #7]
  
  if((SCSI_Sense_Head != SCSI_Sense_Tail)) {
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <SCSI_RequestSense+0xb8>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <SCSI_RequestSense+0xbc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d024      	beq.n	80013d4 <SCSI_RequestSense+0x88>
    
    MSC_BOT_Data[2]     = SCSI_Sense[SCSI_Sense_Head].Skey;		
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <SCSI_RequestSense+0xb8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <SCSI_RequestSense+0xc0>)
 8001392:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <SCSI_RequestSense+0xb4>)
 8001398:	709a      	strb	r2, [r3, #2]
    MSC_BOT_Data[12]    = SCSI_Sense[SCSI_Sense_Head].w.b.ASCQ;	
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <SCSI_RequestSense+0xb8>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4a1b      	ldr	r2, [pc, #108]	; (800140c <SCSI_RequestSense+0xc0>)
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	795a      	ldrb	r2, [r3, #5]
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <SCSI_RequestSense+0xb4>)
 80013a8:	731a      	strb	r2, [r3, #12]
    MSC_BOT_Data[13]    = SCSI_Sense[SCSI_Sense_Head].w.b.ASC;	
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <SCSI_RequestSense+0xb8>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <SCSI_RequestSense+0xc0>)
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	791a      	ldrb	r2, [r3, #4]
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <SCSI_RequestSense+0xb4>)
 80013b8:	735a      	strb	r2, [r3, #13]
    SCSI_Sense_Head++;
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <SCSI_RequestSense+0xb8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <SCSI_RequestSense+0xb8>)
 80013c4:	701a      	strb	r2, [r3, #0]
    
    if (SCSI_Sense_Head == SENSE_LIST_DEEPTH)
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <SCSI_RequestSense+0xb8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d102      	bne.n	80013d4 <SCSI_RequestSense+0x88>
    {
      SCSI_Sense_Head = 0;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <SCSI_RequestSense+0xb8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
    }
  }
  MSC_BOT_DataLen = REQUEST_SENSE_DATA_LEN;  
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <SCSI_RequestSense+0xc4>)
 80013d6:	2212      	movs	r2, #18
 80013d8:	801a      	strh	r2, [r3, #0]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3304      	adds	r3, #4
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b12      	cmp	r3, #18
 80013e2:	d805      	bhi.n	80013f0 <SCSI_RequestSense+0xa4>
  {
    MSC_BOT_DataLen = params[4];
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3304      	adds	r3, #4
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <SCSI_RequestSense+0xc4>)
 80013ee:	801a      	strh	r2, [r3, #0]
  }
  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000524 	.word	0x20000524
 8001404:	20001564 	.word	0x20001564
 8001408:	20001594 	.word	0x20001594
 800140c:	2000156c 	.word	0x2000156c
 8001410:	2000155a 	.word	0x2000155a

08001414 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	460b      	mov	r3, r1
 8001420:	71bb      	strb	r3, [r7, #6]
 8001422:	4613      	mov	r3, r2
 8001424:	717b      	strb	r3, [r7, #5]
  SCSI_Sense[SCSI_Sense_Tail].Skey  = sKey;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <SCSI_SenseCode+0x5c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <SCSI_SenseCode+0x60>)
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
  SCSI_Sense[SCSI_Sense_Tail].w.ASC = ASC << 8;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <SCSI_SenseCode+0x5c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	797b      	ldrb	r3, [r7, #5]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	4619      	mov	r1, r3
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <SCSI_SenseCode+0x60>)
 8001442:	00c3      	lsls	r3, r0, #3
 8001444:	4413      	add	r3, r2
 8001446:	6059      	str	r1, [r3, #4]
  SCSI_Sense_Tail++;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <SCSI_SenseCode+0x5c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <SCSI_SenseCode+0x5c>)
 8001452:	701a      	strb	r2, [r3, #0]
  if (SCSI_Sense_Tail == SENSE_LIST_DEEPTH)
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SCSI_SenseCode+0x5c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d102      	bne.n	8001462 <SCSI_SenseCode+0x4e>
  {
    SCSI_Sense_Tail = 0;
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SCSI_SenseCode+0x5c>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20001594 	.word	0x20001594
 8001474:	2000156c 	.word	0x2000156c

08001478 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(uint8_t lun, uint8_t *params)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  MSC_BOT_DataLen = 0;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SCSI_StartStopUnit+0x20>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
  return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	2000155a 	.word	0x2000155a

0800149c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(uint8_t lun , uint8_t *params)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if(MSC_BOT_State == BOT_IDLE)  /* Idle */
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <SCSI_Read10+0x114>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d172      	bne.n	8001596 <SCSI_Read10+0xfa>
  {
    
    /* case 10 : Ho <> Di */
    
    if ((MSC_BOT_cbw.bmFlags & 0x80) != 0x80)
 80014b0:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <SCSI_Read10+0x118>)
 80014b2:	7b1b      	ldrb	r3, [r3, #12]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db09      	blt.n	80014ce <SCSI_Read10+0x32>
    {
      SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <SCSI_Read10+0x118>)
 80014bc:	7b5b      	ldrb	r3, [r3, #13]
 80014be:	2220      	movs	r2, #32
 80014c0:	2105      	movs	r1, #5
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ffa6 	bl	8001414 <SCSI_SenseCode>
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	e06c      	b.n	80015a8 <SCSI_Read10+0x10c>
    }    
    
    if(USBD_STORAGE_fops->IsReady(lun) !=0 )
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <SCSI_Read10+0x11c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4798      	blx	r3
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(lun,
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	223a      	movs	r2, #58	; 0x3a
 80014e4:	2102      	movs	r1, #2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff94 	bl	8001414 <SCSI_SenseCode>
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e05a      	b.n	80015a8 <SCSI_Read10+0x10c>
    } 
    
    SCSI_blk_addr = (params[2] << 24) | \
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3302      	adds	r3, #2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3303      	adds	r3, #3
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	041b      	lsls	r3, r3, #16
    SCSI_blk_addr = (params[2] << 24) | \
 8001502:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3304      	adds	r3, #4
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 800150c:	4313      	orrs	r3, r2
          params[5];
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	3205      	adds	r2, #5
 8001512:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 8001514:	4313      	orrs	r3, r2
 8001516:	461a      	mov	r2, r3
    SCSI_blk_addr = (params[2] << 24) | \
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <SCSI_Read10+0x120>)
 800151a:	601a      	str	r2, [r3, #0]
    
    SCSI_blk_len =  (params[7] <<  8) | \
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3307      	adds	r3, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	021b      	lsls	r3, r3, #8
      params[8];  
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	3208      	adds	r2, #8
 8001528:	7812      	ldrb	r2, [r2, #0]
    SCSI_blk_len =  (params[7] <<  8) | \
 800152a:	4313      	orrs	r3, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <SCSI_Read10+0x124>)
 8001530:	601a      	str	r2, [r3, #0]
    
    
    
    if( SCSI_CheckAddressRange(lun, SCSI_blk_addr, SCSI_blk_len) < 0)
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <SCSI_Read10+0x120>)
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <SCSI_Read10+0x124>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29a      	uxth	r2, r3
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f932 	bl	80017a8 <SCSI_CheckAddressRange>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	da02      	bge.n	8001550 <SCSI_Read10+0xb4>
    {
      return -1; /* error */
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e02b      	b.n	80015a8 <SCSI_Read10+0x10c>
    }
    
    MSC_BOT_State = BOT_DATA_IN;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <SCSI_Read10+0x114>)
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
    SCSI_blk_addr *= SCSI_blk_size;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <SCSI_Read10+0x120>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <SCSI_Read10+0x128>)
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <SCSI_Read10+0x120>)
 8001564:	6013      	str	r3, [r2, #0]
    SCSI_blk_len  *= SCSI_blk_size;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <SCSI_Read10+0x124>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <SCSI_Read10+0x128>)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <SCSI_Read10+0x124>)
 8001574:	6013      	str	r3, [r2, #0]
    
    /* cases 4,5 : Hi <> Dn */
    if (MSC_BOT_cbw.dDataLength != SCSI_blk_len)
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <SCSI_Read10+0x118>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <SCSI_Read10+0x124>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d009      	beq.n	8001596 <SCSI_Read10+0xfa>
    {
      SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <SCSI_Read10+0x118>)
 8001584:	7b5b      	ldrb	r3, [r3, #13]
 8001586:	2220      	movs	r2, #32
 8001588:	2105      	movs	r1, #5
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff42 	bl	8001414 <SCSI_SenseCode>
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	e008      	b.n	80015a8 <SCSI_Read10+0x10c>
    }
  }
  MSC_BOT_DataLen = MSC_MEDIA_PACKET;  
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <SCSI_Read10+0x12c>)
 8001598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800159c:	801a      	strh	r2, [r3, #0]
  
  return SCSI_ProcessRead(lun);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f921 	bl	80017e8 <SCSI_ProcessRead>
 80015a6:	4603      	mov	r3, r0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20001558 	.word	0x20001558
 80015b4:	20001528 	.word	0x20001528
 80015b8:	200000d0 	.word	0x200000d0
 80015bc:	2000158c 	.word	0x2000158c
 80015c0:	20001568 	.word	0x20001568
 80015c4:	20001560 	.word	0x20001560
 80015c8:	2000155a 	.word	0x2000155a

080015cc <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (uint8_t lun , uint8_t *params)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if (MSC_BOT_State == BOT_IDLE) /* Idle */
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <SCSI_Write10+0x154>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 8095 	bne.w	800170c <SCSI_Write10+0x140>
  {
    
    /* case 8 : Hi <> Do */
    
    if ((MSC_BOT_cbw.bmFlags & 0x80) == 0x80)
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <SCSI_Write10+0x158>)
 80015e4:	7b1b      	ldrb	r3, [r3, #12]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da09      	bge.n	8001600 <SCSI_Write10+0x34>
    {
      SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <SCSI_Write10+0x158>)
 80015ee:	7b5b      	ldrb	r3, [r3, #13]
 80015f0:	2220      	movs	r2, #32
 80015f2:	2105      	movs	r1, #5
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff0d 	bl	8001414 <SCSI_SenseCode>
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e08a      	b.n	8001716 <SCSI_Write10+0x14a>
    }
    
    /* Check whether Media is ready */
    if(USBD_STORAGE_fops->IsReady(lun) !=0 )
 8001600:	4b49      	ldr	r3, [pc, #292]	; (8001728 <SCSI_Write10+0x15c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	4610      	mov	r0, r2
 800160a:	4798      	blx	r3
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(lun,
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	223a      	movs	r2, #58	; 0x3a
 8001616:	2102      	movs	r1, #2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fefb 	bl	8001414 <SCSI_SenseCode>
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e078      	b.n	8001716 <SCSI_Write10+0x14a>
    } 
    
    /* Check If media is write-protected */
    if(USBD_STORAGE_fops->IsWriteProtected(lun) !=0 )
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <SCSI_Write10+0x15c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	4610      	mov	r0, r2
 800162e:	4798      	blx	r3
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <SCSI_Write10+0x7c>
    {
      SCSI_SenseCode(lun,
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2227      	movs	r2, #39	; 0x27
 800163a:	2102      	movs	r1, #2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fee9 	bl	8001414 <SCSI_SenseCode>
                     NOT_READY, 
                     WRITE_PROTECTED);
      return -1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e066      	b.n	8001716 <SCSI_Write10+0x14a>
    } 
    
    
    SCSI_blk_addr = (params[2] << 24) | \
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3302      	adds	r3, #2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3303      	adds	r3, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	041b      	lsls	r3, r3, #16
    SCSI_blk_addr = (params[2] << 24) | \
 8001658:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3304      	adds	r3, #4
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 8001662:	4313      	orrs	r3, r2
          params[5];
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	3205      	adds	r2, #5
 8001668:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 800166a:	4313      	orrs	r3, r2
 800166c:	461a      	mov	r2, r3
    SCSI_blk_addr = (params[2] << 24) | \
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <SCSI_Write10+0x160>)
 8001670:	601a      	str	r2, [r3, #0]
    SCSI_blk_len = (params[7] <<  8) | \
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3307      	adds	r3, #7
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	021b      	lsls	r3, r3, #8
      params[8];  
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	3208      	adds	r2, #8
 800167e:	7812      	ldrb	r2, [r2, #0]
    SCSI_blk_len = (params[7] <<  8) | \
 8001680:	4313      	orrs	r3, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <SCSI_Write10+0x164>)
 8001686:	601a      	str	r2, [r3, #0]
    
    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(lun, SCSI_blk_addr, SCSI_blk_len) < 0)
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <SCSI_Write10+0x160>)
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <SCSI_Write10+0x164>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b29a      	uxth	r2, r3
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f887 	bl	80017a8 <SCSI_CheckAddressRange>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	da02      	bge.n	80016a6 <SCSI_Write10+0xda>
    {
      return -1; /* error */      
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	e037      	b.n	8001716 <SCSI_Write10+0x14a>
    }
    
    SCSI_blk_addr *= SCSI_blk_size;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <SCSI_Write10+0x160>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <SCSI_Write10+0x168>)
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <SCSI_Write10+0x160>)
 80016b4:	6013      	str	r3, [r2, #0]
    SCSI_blk_len  *= SCSI_blk_size;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <SCSI_Write10+0x164>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <SCSI_Write10+0x168>)
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <SCSI_Write10+0x164>)
 80016c4:	6013      	str	r3, [r2, #0]
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (MSC_BOT_cbw.dDataLength != SCSI_blk_len)
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <SCSI_Write10+0x158>)
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <SCSI_Write10+0x164>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d009      	beq.n	80016e6 <SCSI_Write10+0x11a>
    {
      SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <SCSI_Write10+0x158>)
 80016d4:	7b5b      	ldrb	r3, [r3, #13]
 80016d6:	2220      	movs	r2, #32
 80016d8:	2105      	movs	r1, #5
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe9a 	bl	8001414 <SCSI_SenseCode>
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	e017      	b.n	8001716 <SCSI_Write10+0x14a>
    }
    
    /* Prepare EP to receive first data packet */
    MSC_BOT_State = BOT_DATA_OUT;  
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <SCSI_Write10+0x154>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
    DCD_EP_PrepareRx (cdev,
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <SCSI_Write10+0x16c>)
 80016ee:	6818      	ldr	r0, [r3, #0]
                      MSC_OUT_EP,
                      MSC_BOT_Data, 
                      MIN (SCSI_blk_len, MSC_MEDIA_PACKET));  
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <SCSI_Write10+0x164>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f8:	bf28      	it	cs
 80016fa:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
    DCD_EP_PrepareRx (cdev,
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <SCSI_Write10+0x170>)
 8001702:	2101      	movs	r1, #1
 8001704:	f002 faee 	bl	8003ce4 <DCD_EP_PrepareRx>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(lun);
  }
  return 0;
 8001708:	2300      	movs	r3, #0
 800170a:	e004      	b.n	8001716 <SCSI_Write10+0x14a>
    return SCSI_ProcessWrite(lun);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f8cc 	bl	80018ac <SCSI_ProcessWrite>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20001558 	.word	0x20001558
 8001724:	20001528 	.word	0x20001528
 8001728:	200000d0 	.word	0x200000d0
 800172c:	2000158c 	.word	0x2000158c
 8001730:	20001568 	.word	0x20001568
 8001734:	20001560 	.word	0x20001560
 8001738:	20001590 	.word	0x20001590
 800173c:	20000524 	.word	0x20000524

08001740 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(uint8_t lun , uint8_t *params){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((params[1]& 0x02) == 0x02) 
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <SCSI_Verify10+0x2c>
  {
    SCSI_SenseCode (lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2224      	movs	r2, #36	; 0x24
 800175e:	2105      	movs	r1, #5
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe57 	bl	8001414 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e012      	b.n	8001792 <SCSI_Verify10+0x52>
  }
  
  if(SCSI_CheckAddressRange(lun, SCSI_blk_addr, SCSI_blk_len) < 0)
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <SCSI_Verify10+0x5c>)
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SCSI_Verify10+0x60>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f815 	bl	80017a8 <SCSI_CheckAddressRange>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	da02      	bge.n	800178a <SCSI_Verify10+0x4a>
  {
    return -1; /* error */      
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e003      	b.n	8001792 <SCSI_Verify10+0x52>
  }
  MSC_BOT_DataLen = 0;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SCSI_Verify10+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	801a      	strh	r2, [r3, #0]
  return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000158c 	.word	0x2000158c
 80017a0:	20001568 	.word	0x20001568
 80017a4:	2000155a 	.word	0x2000155a

080017a8 <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	4613      	mov	r3, r2
 80017b6:	80bb      	strh	r3, [r7, #4]
  
  if ((blk_offset + blk_nbr) > SCSI_blk_nbr )
 80017b8:	88ba      	ldrh	r2, [r7, #4]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	441a      	add	r2, r3
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <SCSI_CheckAddressRange+0x3c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d908      	bls.n	80017d8 <SCSI_CheckAddressRange+0x30>
  {
    SCSI_SenseCode(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2221      	movs	r2, #33	; 0x21
 80017ca:	2105      	movs	r1, #5
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe21 	bl	8001414 <SCSI_SenseCode>
    return -1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e000      	b.n	80017da <SCSI_CheckAddressRange+0x32>
  }
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000155c 	.word	0x2000155c

080017e8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (uint8_t lun)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  uint32_t len;
  
  len = MIN(SCSI_blk_len , MSC_MEDIA_PACKET); 
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <SCSI_ProcessRead+0xa4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017fa:	bf28      	it	cs
 80017fc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8001800:	60fb      	str	r3, [r7, #12]
  
  if( USBD_STORAGE_fops->Read(lun ,
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <SCSI_ProcessRead+0xa8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691c      	ldr	r4, [r3, #16]
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <SCSI_ProcessRead+0xac>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <SCSI_ProcessRead+0xb0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fbb2 f1f3 	udiv	r1, r2, r3
                              MSC_BOT_Data, 
                              SCSI_blk_addr / SCSI_blk_size, 
                              len / SCSI_blk_size) < 0)
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <SCSI_ProcessRead+0xb0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
  if( USBD_STORAGE_fops->Read(lun ,
 800181e:	b29b      	uxth	r3, r3
 8001820:	79f8      	ldrb	r0, [r7, #7]
 8001822:	460a      	mov	r2, r1
 8001824:	491d      	ldr	r1, [pc, #116]	; (800189c <SCSI_ProcessRead+0xb4>)
 8001826:	47a0      	blx	r4
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	da08      	bge.n	8001840 <SCSI_ProcessRead+0x58>
  {
    
    SCSI_SenseCode(lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2211      	movs	r2, #17
 8001832:	2104      	movs	r1, #4
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fded 	bl	8001414 <SCSI_SenseCode>
    return -1; 
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e020      	b.n	8001882 <SCSI_ProcessRead+0x9a>
  }
  
  
  DCD_EP_Tx (cdev, 
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <SCSI_ProcessRead+0xb8>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <SCSI_ProcessRead+0xb4>)
 8001848:	2181      	movs	r1, #129	; 0x81
 800184a:	f002 fa8d 	bl	8003d68 <DCD_EP_Tx>
             MSC_IN_EP,
             MSC_BOT_Data,
             len);
  
  
  SCSI_blk_addr   += len; 
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <SCSI_ProcessRead+0xac>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <SCSI_ProcessRead+0xac>)
 8001858:	6013      	str	r3, [r2, #0]
  SCSI_blk_len    -= len;  
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <SCSI_ProcessRead+0xa4>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SCSI_ProcessRead+0xa4>)
 8001864:	6013      	str	r3, [r2, #0]
  
  /* case 6 : Hi = Di */
  MSC_BOT_csw.dDataResidue -= len;
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <SCSI_ProcessRead+0xbc>)
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <SCSI_ProcessRead+0xbc>)
 8001870:	6093      	str	r3, [r2, #8]
  
  if (SCSI_blk_len == 0)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <SCSI_ProcessRead+0xa4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <SCSI_ProcessRead+0x98>
  {
    MSC_BOT_State = BOT_LAST_DATA_IN;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <SCSI_ProcessRead+0xc0>)
 800187c:	2203      	movs	r2, #3
 800187e:	701a      	strb	r2, [r3, #0]
  }
  return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	20001568 	.word	0x20001568
 8001890:	200000d0 	.word	0x200000d0
 8001894:	2000158c 	.word	0x2000158c
 8001898:	20001560 	.word	0x20001560
 800189c:	20000524 	.word	0x20000524
 80018a0:	20001590 	.word	0x20001590
 80018a4:	20001548 	.word	0x20001548
 80018a8:	20001558 	.word	0x20001558

080018ac <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (uint8_t lun)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  uint32_t len;
  
  len = MIN(SCSI_blk_len , MSC_MEDIA_PACKET); 
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <SCSI_ProcessWrite+0xb8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018be:	bf28      	it	cs
 80018c0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80018c4:	60fb      	str	r3, [r7, #12]
  
  if(USBD_STORAGE_fops->Write(lun ,
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <SCSI_ProcessWrite+0xbc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695c      	ldr	r4, [r3, #20]
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <SCSI_ProcessWrite+0xc0>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <SCSI_ProcessWrite+0xc4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fbb2 f1f3 	udiv	r1, r2, r3
                              MSC_BOT_Data, 
                              SCSI_blk_addr / SCSI_blk_size, 
                              len / SCSI_blk_size) < 0)
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <SCSI_ProcessWrite+0xc4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
  if(USBD_STORAGE_fops->Write(lun ,
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	79f8      	ldrb	r0, [r7, #7]
 80018e6:	460a      	mov	r2, r1
 80018e8:	4922      	ldr	r1, [pc, #136]	; (8001974 <SCSI_ProcessWrite+0xc8>)
 80018ea:	47a0      	blx	r4
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da08      	bge.n	8001904 <SCSI_ProcessWrite+0x58>
  {
    SCSI_SenseCode(lun, HARDWARE_ERROR, WRITE_FAULT);     
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2203      	movs	r2, #3
 80018f6:	2104      	movs	r1, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fd8b 	bl	8001414 <SCSI_SenseCode>
    return -1; 
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e02b      	b.n	800195c <SCSI_ProcessWrite+0xb0>
  }
  
  
  SCSI_blk_addr  += len; 
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <SCSI_ProcessWrite+0xc0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	4a17      	ldr	r2, [pc, #92]	; (800196c <SCSI_ProcessWrite+0xc0>)
 800190e:	6013      	str	r3, [r2, #0]
  SCSI_blk_len   -= len; 
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <SCSI_ProcessWrite+0xb8>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <SCSI_ProcessWrite+0xb8>)
 800191a:	6013      	str	r3, [r2, #0]
  
  /* case 12 : Ho = Do */
  MSC_BOT_csw.dDataResidue -= len;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <SCSI_ProcessWrite+0xcc>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <SCSI_ProcessWrite+0xcc>)
 8001926:	6093      	str	r3, [r2, #8]
  
  if (SCSI_blk_len == 0)
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <SCSI_ProcessWrite+0xb8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d106      	bne.n	800193e <SCSI_ProcessWrite+0x92>
  {
    MSC_BOT_SendCSW (cdev, CSW_CMD_PASSED);
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <SCSI_ProcessWrite+0xd0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f8b6 	bl	8000aa8 <MSC_BOT_SendCSW>
 800193c:	e00d      	b.n	800195a <SCSI_ProcessWrite+0xae>
  }
  else
  {
    /* Prapare EP to Receive next packet */
    DCD_EP_PrepareRx (cdev,
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <SCSI_ProcessWrite+0xd0>)
 8001940:	6818      	ldr	r0, [r3, #0]
                      MSC_OUT_EP,
                      MSC_BOT_Data, 
                      MIN (SCSI_blk_len, MSC_MEDIA_PACKET)); 
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <SCSI_ProcessWrite+0xb8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194a:	bf28      	it	cs
 800194c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
    DCD_EP_PrepareRx (cdev,
 8001950:	b29b      	uxth	r3, r3
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <SCSI_ProcessWrite+0xc8>)
 8001954:	2101      	movs	r1, #1
 8001956:	f002 f9c5 	bl	8003ce4 <DCD_EP_PrepareRx>
  }
  
  return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	20001568 	.word	0x20001568
 8001968:	200000d0 	.word	0x200000d0
 800196c:	2000158c 	.word	0x2000158c
 8001970:	20001560 	.word	0x20001560
 8001974:	20000524 	.word	0x20000524
 8001978:	20001548 	.word	0x20001548
 800197c:	20001590 	.word	0x20001590

08001980 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	460b      	mov	r3, r1
 800198e:	72fb      	strb	r3, [r7, #11]
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f003 fa93 	bl	8004ebc <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f81d 	bl	80019d6 <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	4619      	mov	r1, r3
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f002 f87c 	bl	8003ab6 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f003 fb0f 	bl	8004fec <USB_OTG_BSP_EnableInterrupt>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fe72 	bl	80026e4 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8001a00:	7a3b      	ldrb	r3, [r7, #8]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d00a      	beq.n	8001a20 <USBD_SetupStage+0x34>
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d00f      	beq.n	8001a2e <USBD_SetupStage+0x42>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d114      	bne.n	8001a3c <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4619      	mov	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa8d 	bl	8001f38 <USBD_StdDevReq>
    break;
 8001a1e:	e016      	b.n	8001a4e <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fad6 	bl	8001fd8 <USBD_StdItfReq>
    break;
 8001a2c:	e00f      	b.n	8001a4e <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fb03 	bl	8002040 <USBD_StdEPReq>
    break;
 8001a3a:	e008      	b.n	8001a4e <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8001a3c:	7a3b      	ldrb	r3, [r7, #8]
 8001a3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f002 f9ca 	bl	8003de0 <DCD_EP_Stall>
    break;
 8001a4c:	bf00      	nop
  }  
  return USBD_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d144      	bne.n	8001af4 <USBD_DataOutStage+0x9c>
  {
    ep = &pdev->dev.out_ep[0];
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001a70:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d14e      	bne.n	8001b1a <USBD_DataOutStage+0xc2>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d920      	bls.n	8001aca <USBD_DataOutStage+0x72>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	1ad2      	subs	r2, r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	78db      	ldrb	r3, [r3, #3]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d106      	bne.n	8001aac <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	68d9      	ldr	r1, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	bf28      	it	cs
 8001abc:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f9dc 	bl	8001e80 <USBD_CtlContinueRx>
 8001ac8:	e027      	b.n	8001b1a <USBD_DataOutStage+0xc2>
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <USBD_DataOutStage+0x94>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d105      	bne.n	8001aec <USBD_DataOutStage+0x94>
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f9db 	bl	8001ea8 <USBD_CtlSendStatus>
 8001af2:	e012      	b.n	8001b1a <USBD_DataOutStage+0xc2>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00c      	beq.n	8001b1a <USBD_DataOutStage+0xc2>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d107      	bne.n	8001b1a <USBD_DataOutStage+0xc2>
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	4611      	mov	r1, r2
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
  }  
  return USBD_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d16b      	bne.n	8001c0e <USBD_DataInStage+0xea>
  {
    ep = &pdev->dev.in_ep[0];
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001b3c:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d155      	bne.n	8001bf4 <USBD_DataInStage+0xd0>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d91b      	bls.n	8001b8c <USBD_DataInStage+0x68>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	78db      	ldrb	r3, [r3, #3]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d106      	bne.n	8001b78 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	441a      	add	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	68d9      	ldr	r1, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	69db      	ldr	r3, [r3, #28]
        USBD_CtlContinueSendData (pdev, 
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f967 	bl	8001e58 <USBD_CtlContinueSendData>
 8001b8a:	e033      	b.n	8001bf4 <USBD_DataInStage+0xd0>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	6892      	ldr	r2, [r2, #8]
 8001b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b98:	fb02 f201 	mul.w	r2, r2, r1
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d114      	bne.n	8001bcc <USBD_DataInStage+0xa8>
           (ep->total_data_len >= ep->maxpacket) &&
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a1a      	ldr	r2, [r3, #32]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	689b      	ldr	r3, [r3, #8]
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d30e      	bcc.n	8001bcc <USBD_DataInStage+0xa8>
             (ep->total_data_len < ep->ctl_data_len ))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a1a      	ldr	r2, [r3, #32]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (ep->total_data_len >= ep->maxpacket) &&
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d208      	bcs.n	8001bcc <USBD_DataInStage+0xa8>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f94a 	bl	8001e58 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8001bca:	e013      	b.n	8001bf4 <USBD_DataInStage+0xd0>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00a      	beq.n	8001bee <USBD_DataInStage+0xca>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d105      	bne.n	8001bee <USBD_DataInStage+0xca>
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f972 	bl	8001ed8 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d11a      	bne.n	8001c34 <USBD_DataInStage+0x110>
    {
      USBD_RunTestMode(pdev); 
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f81e 	bl	8001c40 <USBD_RunTestMode>
      pdev->dev.test_mode = 0;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8001c0c:	e012      	b.n	8001c34 <USBD_DataInStage+0x110>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <USBD_DataInStage+0x110>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d107      	bne.n	8001c34 <USBD_DataInStage+0x110>
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
  }  
  return USBD_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <USBD_RunTestMode+0x20>)
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	605a      	str	r2, [r3, #4]
  return USBD_OK;  
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	20001598 	.word	0x20001598

08001c64 <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	2100      	movs	r1, #0
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f001 ffa2 	bl	8003bbc <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2240      	movs	r2, #64	; 0x40
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f001 ff9c 	bl	8003bbc <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	7892      	ldrb	r2, [r2, #2]
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4798      	blx	r3
  
  return USBD_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;  
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 2112 	ldrb.w	r2, [r3, #274]	; 0x112
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2204      	movs	r2, #4
 8001cee:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4798      	blx	r3
  return USBD_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
  }
  return USBD_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	4611      	mov	r1, r2
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4798      	blx	r3
  return USBD_OK; 
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	4611      	mov	r1, r2
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
  return USBD_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
  return USBD_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
  return USBD_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <USBD_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  pdev->dev.usr_cb->DeviceConnected();
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	4798      	blx	r3
  pdev->dev.connection_status = 1;  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  return USBD_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <USBD_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  pdev->dev.usr_cb->DeviceDisconnected();
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	4798      	blx	r3
  pdev->dev.class_cb->DeInit(pdev, 0);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2100      	movs	r1, #0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
  pdev->dev.connection_status = 0;    
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  return USBD_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	2100      	movs	r1, #0
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f001 ff8d 	bl	8003d68 <DCD_EP_Tx>
 
  return ret;
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	4613      	mov	r3, r2
 8001e64:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f001 ff79 	bl	8003d68 <DCD_EP_Tx>
  
  
  return ret;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	2100      	movs	r1, #0
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f001 ff23 	bl	8003ce4 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f001 ff50 	bl	8003d68 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f001 fd91 	bl	80039f0 <USB_OTG_EP0_OutStart>
  
  return ret;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 8001eec:	2300      	movs	r3, #0
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f001 fef6 	bl	8003ce4 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f001 fd79 	bl	80039f0 <USB_OTG_EP0_OutStart>
  
  return ret;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <USBD_GetRxCount>:
* @param  pdev: USB OTG device instance
*         epnum: endpoint index
* @retval Rx Data blength
*/
uint16_t  USBD_GetRxCount (USB_OTG_CORE_HANDLE  *pdev , uint8_t epnum)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
  return pdev->dev.out_ep[epnum].xfer_count;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	2b09      	cmp	r3, #9
 8001f4c:	d839      	bhi.n	8001fc2 <USBD_StdDevReq+0x8a>
 8001f4e:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <USBD_StdDevReq+0x1c>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fb9 	.word	0x08001fb9
 8001f5c:	08001fc3 	.word	0x08001fc3
 8001f60:	08001faf 	.word	0x08001faf
 8001f64:	08001fc3 	.word	0x08001fc3
 8001f68:	08001f87 	.word	0x08001f87
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001fc3 	.word	0x08001fc3
 8001f74:	08001f9b 	.word	0x08001f9b
 8001f78:	08001f91 	.word	0x08001f91
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f936 	bl	80021f0 <USBD_GetDescriptor>
    break;
 8001f84:	e022      	b.n	8001fcc <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fa05 	bl	8002398 <USBD_SetAddress>
    break;
 8001f8e:	e01d      	b.n	8001fcc <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fa3e 	bl	8002414 <USBD_SetConfig>
    break;
 8001f98:	e018      	b.n	8001fcc <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fab3 	bl	8002508 <USBD_GetConfig>
    break;
 8001fa2:	e013      	b.n	8001fcc <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fade 	bl	8002568 <USBD_GetStatus>
    break;
 8001fac:	e00e      	b.n	8001fcc <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fb03 	bl	80025bc <USBD_SetFeature>
    break;
 8001fb6:	e009      	b.n	8001fcc <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fb6a 	bl	8002694 <USBD_ClrFeature>
    break;
 8001fc0:	e004      	b.n	8001fcc <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fbd6 	bl	8002776 <USBD_CtlError>
    break;
 8001fca:	bf00      	nop
  }
  
  return ret;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d11b      	bne.n	8002028 <USBD_StdItfReq+0x50>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d811      	bhi.n	800201e <USBD_StdItfReq+0x46>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	88db      	ldrh	r3, [r3, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d110      	bne.n	8002032 <USBD_StdItfReq+0x5a>
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff46 	bl	8001ea8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800201c:	e009      	b.n	8002032 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fba8 	bl	8002776 <USBD_CtlError>
    break;
 8002026:	e004      	b.n	8002032 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fba3 	bl	8002776 <USBD_CtlError>
    break;
 8002030:	e000      	b.n	8002034 <USBD_StdItfReq+0x5c>
    break;
 8002032:	bf00      	nop
  }
  return ret;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	889b      	ldrh	r3, [r3, #4]
 8002052:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d039      	beq.n	80020d0 <USBD_StdEPReq+0x90>
 800205c:	2b03      	cmp	r3, #3
 800205e:	d002      	beq.n	8002066 <USBD_StdEPReq+0x26>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d06c      	beq.n	800213e <USBD_StdEPReq+0xfe>
      break;
    }
    break;
    
  default:
    break;
 8002064:	e0bd      	b.n	80021e2 <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800206c:	2b02      	cmp	r3, #2
 800206e:	d002      	beq.n	8002076 <USBD_StdEPReq+0x36>
 8002070:	2b03      	cmp	r3, #3
 8002072:	d00c      	beq.n	800208e <USBD_StdEPReq+0x4e>
 8002074:	e025      	b.n	80020c2 <USBD_StdEPReq+0x82>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002076:	7bbb      	ldrb	r3, [r7, #14]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d027      	beq.n	80020cc <USBD_StdEPReq+0x8c>
 800207c:	7bbb      	ldrb	r3, [r7, #14]
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d024      	beq.n	80020cc <USBD_StdEPReq+0x8c>
        DCD_EP_Stall(pdev , ep_addr);
 8002082:	7bbb      	ldrb	r3, [r7, #14]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f001 feaa 	bl	8003de0 <DCD_EP_Stall>
      break;	
 800208c:	e01e      	b.n	80020cc <USBD_StdEPReq+0x8c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	885b      	ldrh	r3, [r3, #2]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <USBD_StdEPReq+0x6c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002096:	7bbb      	ldrb	r3, [r7, #14]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <USBD_StdEPReq+0x6c>
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d004      	beq.n	80020ac <USBD_StdEPReq+0x6c>
          DCD_EP_Stall(pdev , ep_addr);
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f001 fe9a 	bl	8003de0 <DCD_EP_Stall>
      pdev->dev.class_cb->Setup (pdev, req);   
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fef4 	bl	8001ea8 <USBD_CtlSendStatus>
      break;
 80020c0:	e005      	b.n	80020ce <USBD_StdEPReq+0x8e>
      USBD_CtlError(pdev , req);
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fb56 	bl	8002776 <USBD_CtlError>
      break;    
 80020ca:	e000      	b.n	80020ce <USBD_StdEPReq+0x8e>
      break;	
 80020cc:	bf00      	nop
    break;
 80020ce:	e088      	b.n	80021e2 <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d002      	beq.n	80020e0 <USBD_StdEPReq+0xa0>
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d00c      	beq.n	80020f8 <USBD_StdEPReq+0xb8>
 80020de:	e025      	b.n	800212c <USBD_StdEPReq+0xec>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80020e0:	7bbb      	ldrb	r3, [r7, #14]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d027      	beq.n	8002136 <USBD_StdEPReq+0xf6>
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d024      	beq.n	8002136 <USBD_StdEPReq+0xf6>
        DCD_EP_Stall(pdev , ep_addr);
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	4619      	mov	r1, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f001 fe75 	bl	8003de0 <DCD_EP_Stall>
      break;	
 80020f6:	e01e      	b.n	8002136 <USBD_StdEPReq+0xf6>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	885b      	ldrh	r3, [r3, #2]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11c      	bne.n	800213a <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <USBD_StdEPReq+0xe4>
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	2b80      	cmp	r3, #128	; 0x80
 800210a:	d00b      	beq.n	8002124 <USBD_StdEPReq+0xe4>
          DCD_EP_ClrStall(pdev , ep_addr);
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f001 fea2 	bl	8003e5a <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff febf 	bl	8001ea8 <USBD_CtlSendStatus>
      break;
 800212a:	e006      	b.n	800213a <USBD_StdEPReq+0xfa>
       USBD_CtlError(pdev , req);
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fb21 	bl	8002776 <USBD_CtlError>
      break;    
 8002134:	e002      	b.n	800213c <USBD_StdEPReq+0xfc>
      break;	
 8002136:	bf00      	nop
 8002138:	e053      	b.n	80021e2 <USBD_StdEPReq+0x1a2>
      break;
 800213a:	bf00      	nop
    break;
 800213c:	e051      	b.n	80021e2 <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002144:	2b02      	cmp	r3, #2
 8002146:	d002      	beq.n	800214e <USBD_StdEPReq+0x10e>
 8002148:	2b03      	cmp	r3, #3
 800214a:	d00c      	beq.n	8002166 <USBD_StdEPReq+0x126>
 800214c:	e042      	b.n	80021d4 <USBD_StdEPReq+0x194>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800214e:	7bbb      	ldrb	r3, [r7, #14]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d044      	beq.n	80021de <USBD_StdEPReq+0x19e>
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	2b80      	cmp	r3, #128	; 0x80
 8002158:	d041      	beq.n	80021de <USBD_StdEPReq+0x19e>
        DCD_EP_Stall(pdev , ep_addr);
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f001 fe3e 	bl	8003de0 <DCD_EP_Stall>
      break;	
 8002164:	e03b      	b.n	80021de <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x80)== 0x80)
 8002166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800216a:	2b00      	cmp	r3, #0
 800216c:	da15      	bge.n	800219a <USBD_StdEPReq+0x15a>
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <USBD_StdEPReq+0x152>
          USBD_ep_status = 0x0001;     
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <USBD_StdEPReq+0x1ac>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e01a      	b.n	80021c8 <USBD_StdEPReq+0x188>
          USBD_ep_status = 0x0000;  
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <USBD_StdEPReq+0x1ac>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e016      	b.n	80021c8 <USBD_StdEPReq+0x188>
      else if ((ep_addr & 0x80)== 0x00)
 800219a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db12      	blt.n	80021c8 <USBD_StdEPReq+0x188>
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80021a2:	7bba      	ldrb	r2, [r7, #14]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	f203 3376 	addw	r3, r3, #886	; 0x376
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <USBD_StdEPReq+0x182>
          USBD_ep_status = 0x0001;     
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <USBD_StdEPReq+0x1ac>)
 80021bc:	2201      	movs	r2, #1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e002      	b.n	80021c8 <USBD_StdEPReq+0x188>
          USBD_ep_status = 0x0000;     
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <USBD_StdEPReq+0x1ac>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
      USBD_CtlSendData (pdev,
 80021c8:	2202      	movs	r2, #2
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <USBD_StdEPReq+0x1ac>)
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff fe23 	bl	8001e18 <USBD_CtlSendData>
      break;
 80021d2:	e005      	b.n	80021e0 <USBD_StdEPReq+0x1a0>
       USBD_CtlError(pdev , req);
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 facd 	bl	8002776 <USBD_CtlError>
      break;
 80021dc:	e000      	b.n	80021e0 <USBD_StdEPReq+0x1a0>
      break;	
 80021de:	bf00      	nop
    break;
 80021e0:	bf00      	nop
  }
  return ret;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000110 	.word	0x20000110

080021f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	885b      	ldrh	r3, [r3, #2]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	2b06      	cmp	r3, #6
 8002206:	f200 80a9 	bhi.w	800235c <USBD_GetDescriptor+0x16c>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <USBD_GetDescriptor+0x20>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	0800222d 	.word	0x0800222d
 8002214:	0800225d 	.word	0x0800225d
 8002218:	08002285 	.word	0x08002285
 800221c:	0800235d 	.word	0x0800235d
 8002220:	0800235d 	.word	0x0800235d
 8002224:	08002349 	.word	0x08002349
 8002228:	08002353 	.word	0x08002353
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	7892      	ldrb	r2, [r2, #2]
 8002238:	f107 010a 	add.w	r1, r7, #10
 800223c:	4610      	mov	r0, r2
 800223e:	4798      	blx	r3
 8002240:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	88db      	ldrh	r3, [r3, #6]
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d005      	beq.n	8002256 <USBD_GetDescriptor+0x66>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 8088 	bne.w	8002366 <USBD_GetDescriptor+0x176>
    {                  
      len = 8;
 8002256:	2308      	movs	r3, #8
 8002258:	817b      	strh	r3, [r7, #10]
    }
    break;
 800225a:	e084      	b.n	8002366 <USBD_GetDescriptor+0x176>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	7892      	ldrb	r2, [r2, #2]
 8002268:	f107 010a 	add.w	r1, r7, #10
 800226c:	4610      	mov	r0, r2
 800226e:	4798      	blx	r3
 8002270:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3301      	adds	r3, #1
 8002276:	2202      	movs	r2, #2
 8002278:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
    break;
 8002282:	e071      	b.n	8002368 <USBD_GetDescriptor+0x178>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	885b      	ldrh	r3, [r3, #2]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b05      	cmp	r3, #5
 800228c:	d856      	bhi.n	800233c <USBD_GetDescriptor+0x14c>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <USBD_GetDescriptor+0xa4>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022ad 	.word	0x080022ad
 8002298:	080022c5 	.word	0x080022c5
 800229c:	080022dd 	.word	0x080022dd
 80022a0:	080022f5 	.word	0x080022f5
 80022a4:	0800230d 	.word	0x0800230d
 80022a8:	08002325 	.word	0x08002325
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	7892      	ldrb	r2, [r2, #2]
 80022b8:	f107 010a 	add.w	r1, r7, #10
 80022bc:	4610      	mov	r0, r2
 80022be:	4798      	blx	r3
 80022c0:	60f8      	str	r0, [r7, #12]
      break;
 80022c2:	e040      	b.n	8002346 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	7892      	ldrb	r2, [r2, #2]
 80022d0:	f107 010a 	add.w	r1, r7, #10
 80022d4:	4610      	mov	r0, r2
 80022d6:	4798      	blx	r3
 80022d8:	60f8      	str	r0, [r7, #12]
      break;
 80022da:	e034      	b.n	8002346 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	7892      	ldrb	r2, [r2, #2]
 80022e8:	f107 010a 	add.w	r1, r7, #10
 80022ec:	4610      	mov	r0, r2
 80022ee:	4798      	blx	r3
 80022f0:	60f8      	str	r0, [r7, #12]
      break;
 80022f2:	e028      	b.n	8002346 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	7892      	ldrb	r2, [r2, #2]
 8002300:	f107 010a 	add.w	r1, r7, #10
 8002304:	4610      	mov	r0, r2
 8002306:	4798      	blx	r3
 8002308:	60f8      	str	r0, [r7, #12]
      break;
 800230a:	e01c      	b.n	8002346 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	7892      	ldrb	r2, [r2, #2]
 8002318:	f107 010a 	add.w	r1, r7, #10
 800231c:	4610      	mov	r0, r2
 800231e:	4798      	blx	r3
 8002320:	60f8      	str	r0, [r7, #12]
      break;
 8002322:	e010      	b.n	8002346 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	7892      	ldrb	r2, [r2, #2]
 8002330:	f107 010a 	add.w	r1, r7, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4798      	blx	r3
 8002338:	60f8      	str	r0, [r7, #12]
      break;
 800233a:	e004      	b.n	8002346 <USBD_GetDescriptor+0x156>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa19 	bl	8002776 <USBD_CtlError>
      return;
 8002344:	e025      	b.n	8002392 <USBD_GetDescriptor+0x1a2>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 8002346:	e00f      	b.n	8002368 <USBD_GetDescriptor+0x178>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa13 	bl	8002776 <USBD_CtlError>
      return;
 8002350:	e01f      	b.n	8002392 <USBD_GetDescriptor+0x1a2>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fa0e 	bl	8002776 <USBD_CtlError>
      return;
 800235a:	e01a      	b.n	8002392 <USBD_GetDescriptor+0x1a2>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa09 	bl	8002776 <USBD_CtlError>
    return;
 8002364:	e015      	b.n	8002392 <USBD_GetDescriptor+0x1a2>
    break;
 8002366:	bf00      	nop
  }
  
  if((len != 0)&& (req->wLength != 0))
 8002368:	897b      	ldrh	r3, [r7, #10]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d011      	beq.n	8002392 <USBD_GetDescriptor+0x1a2>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	88db      	ldrh	r3, [r3, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <USBD_GetDescriptor+0x1a2>
  {
    
    len = MIN(len , req->wLength);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	88da      	ldrh	r2, [r3, #6]
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	4293      	cmp	r3, r2
 800237e:	bf28      	it	cs
 8002380:	4613      	movcs	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8002386:	897b      	ldrh	r3, [r7, #10]
 8002388:	461a      	mov	r2, r3
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fd43 	bl	8001e18 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d12c      	bne.n	8002404 <USBD_SetAddress+0x6c>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	88db      	ldrh	r3, [r3, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d128      	bne.n	8002404 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	885b      	ldrh	r3, [r3, #2]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023bc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d104      	bne.n	80023d2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80023c8:	6839      	ldr	r1, [r7, #0]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f9d3 	bl	8002776 <USBD_CtlError>
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80023d0:	e01c      	b.n	800240c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f001 fd92 	bl	8003f08 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fd5f 	bl	8001ea8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <USBD_SetAddress+0x62>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80023f8:	e008      	b.n	800240c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8002402:	e003      	b.n	800240c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f9b5 	bl	8002776 <USBD_CtlError>
  } 
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	885b      	ldrh	r3, [r3, #2]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b37      	ldr	r3, [pc, #220]	; (8002504 <USBD_SetConfig+0xf0>)
 8002426:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <USBD_SetConfig+0xf0>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d904      	bls.n	800243a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f99f 	bl	8002776 <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
 8002438:	e05f      	b.n	80024fa <USBD_SetConfig+0xe6>
    switch (pdev->dev.device_status) 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002440:	2b02      	cmp	r3, #2
 8002442:	d002      	beq.n	800244a <USBD_SetConfig+0x36>
 8002444:	2b03      	cmp	r3, #3
 8002446:	d01b      	beq.n	8002480 <USBD_SetConfig+0x6c>
 8002448:	e052      	b.n	80024f0 <USBD_SetConfig+0xdc>
      if (cfgidx) 
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <USBD_SetConfig+0xf0>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <USBD_SetConfig+0x64>
        pdev->dev.device_config = cfgidx;
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <USBD_SetConfig+0xf0>)
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2203      	movs	r2, #3
 8002460:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <USBD_SetConfig+0xf0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fc60 	bl	8001d30 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff fd19 	bl	8001ea8 <USBD_CtlSendStatus>
      break;
 8002476:	e040      	b.n	80024fa <USBD_SetConfig+0xe6>
         USBD_CtlSendStatus(pdev);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fd15 	bl	8001ea8 <USBD_CtlSendStatus>
      break;
 800247e:	e03c      	b.n	80024fa <USBD_SetConfig+0xe6>
      if (cfgidx == 0) 
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <USBD_SetConfig+0xf0>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <USBD_SetConfig+0x9a>
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <USBD_SetConfig+0xf0>)
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <USBD_SetConfig+0xf0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fc5d 	bl	8001d60 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fcfe 	bl	8001ea8 <USBD_CtlSendStatus>
      break;
 80024ac:	e025      	b.n	80024fa <USBD_SetConfig+0xe6>
      else  if (cfgidx != pdev->dev.device_config) 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <USBD_SetConfig+0xf0>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d015      	beq.n	80024e8 <USBD_SetConfig+0xd4>
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fc4b 	bl	8001d60 <USBD_ClrCfg>
        pdev->dev.device_config = cfgidx;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <USBD_SetConfig+0xf0>)
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <USBD_SetConfig+0xf0>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fc28 	bl	8001d30 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff fce1 	bl	8001ea8 <USBD_CtlSendStatus>
      break;
 80024e6:	e008      	b.n	80024fa <USBD_SetConfig+0xe6>
        USBD_CtlSendStatus(pdev);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fcdd 	bl	8001ea8 <USBD_CtlSendStatus>
      break;
 80024ee:	e004      	b.n	80024fa <USBD_SetConfig+0xe6>
       USBD_CtlError(pdev , req);                     
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f93f 	bl	8002776 <USBD_CtlError>
      break;
 80024f8:	bf00      	nop
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000011c 	.word	0x2000011c

08002508 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	88db      	ldrh	r3, [r3, #6]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d004      	beq.n	8002524 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f92a 	bl	8002776 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8002522:	e01b      	b.n	800255c <USBD_GetConfig+0x54>
    switch (pdev->dev.device_status )  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800252a:	2b02      	cmp	r3, #2
 800252c:	d002      	beq.n	8002534 <USBD_GetConfig+0x2c>
 800252e:	2b03      	cmp	r3, #3
 8002530:	d006      	beq.n	8002540 <USBD_GetConfig+0x38>
 8002532:	e00e      	b.n	8002552 <USBD_GetConfig+0x4a>
      USBD_CtlSendData (pdev, 
 8002534:	2201      	movs	r2, #1
 8002536:	490b      	ldr	r1, [pc, #44]	; (8002564 <USBD_GetConfig+0x5c>)
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fc6d 	bl	8001e18 <USBD_CtlSendData>
      break;
 800253e:	e00d      	b.n	800255c <USBD_GetConfig+0x54>
      USBD_CtlSendData (pdev, 
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002546:	2201      	movs	r2, #1
 8002548:	4619      	mov	r1, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fc64 	bl	8001e18 <USBD_CtlSendData>
      break;
 8002550:	e004      	b.n	800255c <USBD_GetConfig+0x54>
       USBD_CtlError(pdev , req);
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f90e 	bl	8002776 <USBD_CtlError>
      break;
 800255a:	bf00      	nop
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000114 	.word	0x20000114

08002568 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev.device_status) 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002578:	3b02      	subs	r3, #2
 800257a:	2b01      	cmp	r3, #1
 800257c:	d813      	bhi.n	80025a6 <USBD_GetStatus+0x3e>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <USBD_GetStatus+0x50>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <USBD_GetStatus+0x32>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <USBD_GetStatus+0x50>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <USBD_GetStatus+0x50>)
 8002598:	6013      	str	r3, [r2, #0]
    }
    
    USBD_CtlSendData (pdev, 
 800259a:	2202      	movs	r2, #2
 800259c:	4906      	ldr	r1, [pc, #24]	; (80025b8 <USBD_GetStatus+0x50>)
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fc3a 	bl	8001e18 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 80025a4:	e004      	b.n	80025b0 <USBD_GetStatus+0x48>
    
  default :
    USBD_CtlError(pdev , req);                        
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f8e4 	bl	8002776 <USBD_CtlError>
    break;
 80025ae:	bf00      	nop
  }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000118 	.word	0x20000118

080025bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	885b      	ldrh	r3, [r3, #2]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10e      	bne.n	80025f0 <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    pdev->dev.class_cb->Setup (pdev, req);   
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fc5d 	bl	8001ea8 <USBD_CtlSendStatus>
    SET_TEST_MODE = dctl;
    pdev->dev.test_mode = 1;
    USBD_CtlSendStatus(pdev);
  }

}
 80025ee:	e04b      	b.n	8002688 <USBD_SetFeature+0xcc>
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	885b      	ldrh	r3, [r3, #2]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d147      	bne.n	8002688 <USBD_SetFeature+0xcc>
           ((req->wIndex & 0xFF) == 0))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	889b      	ldrh	r3, [r3, #4]
 80025fc:	b2db      	uxtb	r3, r3
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d142      	bne.n	8002688 <USBD_SetFeature+0xcc>
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60bb      	str	r3, [r7, #8]
    test_mode = req->wIndex >> 8;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	889b      	ldrh	r3, [r3, #4]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29b      	uxth	r3, r3
 8002612:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	3b01      	subs	r3, #1
 8002618:	2b04      	cmp	r3, #4
 800261a:	d82b      	bhi.n	8002674 <USBD_SetFeature+0xb8>
 800261c:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <USBD_SetFeature+0x68>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002639 	.word	0x08002639
 8002628:	08002645 	.word	0x08002645
 800262c:	08002651 	.word	0x08002651
 8002630:	0800265d 	.word	0x0800265d
 8002634:	08002669 	.word	0x08002669
      dctl.b.tstctl = 1;
 8002638:	7a3b      	ldrb	r3, [r7, #8]
 800263a:	2201      	movs	r2, #1
 800263c:	f362 1306 	bfi	r3, r2, #4, #3
 8002640:	723b      	strb	r3, [r7, #8]
      break;
 8002642:	e017      	b.n	8002674 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 2;
 8002644:	7a3b      	ldrb	r3, [r7, #8]
 8002646:	2202      	movs	r2, #2
 8002648:	f362 1306 	bfi	r3, r2, #4, #3
 800264c:	723b      	strb	r3, [r7, #8]
      break;
 800264e:	e011      	b.n	8002674 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 3;
 8002650:	7a3b      	ldrb	r3, [r7, #8]
 8002652:	2203      	movs	r2, #3
 8002654:	f362 1306 	bfi	r3, r2, #4, #3
 8002658:	723b      	strb	r3, [r7, #8]
      break;
 800265a:	e00b      	b.n	8002674 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 4;
 800265c:	7a3b      	ldrb	r3, [r7, #8]
 800265e:	2204      	movs	r2, #4
 8002660:	f362 1306 	bfi	r3, r2, #4, #3
 8002664:	723b      	strb	r3, [r7, #8]
      break;
 8002666:	e005      	b.n	8002674 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 5;
 8002668:	7a3b      	ldrb	r3, [r7, #8]
 800266a:	2205      	movs	r2, #5
 800266c:	f362 1306 	bfi	r3, r2, #4, #3
 8002670:	723b      	strb	r3, [r7, #8]
      break;
 8002672:	bf00      	nop
    SET_TEST_MODE = dctl;
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <USBD_SetFeature+0xd4>)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6013      	str	r3, [r2, #0]
    pdev->dev.test_mode = 1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fc10 	bl	8001ea8 <USBD_CtlSendStatus>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20001598 	.word	0x20001598

08002694 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80026a4:	3b02      	subs	r3, #2
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d812      	bhi.n	80026d0 <USBD_ClrFeature+0x3c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	885b      	ldrh	r3, [r3, #2]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d113      	bne.n	80026da <USBD_ClrFeature+0x46>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fbed 	bl	8001ea8 <USBD_CtlSendStatus>
    }
    break;
 80026ce:	e004      	b.n	80026da <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f84f 	bl	8002776 <USBD_CtlError>
    break;
 80026d8:	e000      	b.n	80026dc <USBD_ClrFeature+0x48>
    break;
 80026da:	bf00      	nop
  }
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 25cc 	ldrb.w	r2, [r3, #1484]	; 0x5cc
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 25cd 	ldrb.w	r2, [r3, #1485]	; 0x5cd
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 35ce 	ldrb.w	r3, [r3, #1486]	; 0x5ce
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 35cf 	ldrb.w	r3, [r3, #1487]	; 0x5cf
 8002710:	b29b      	uxth	r3, r3
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b29b      	uxth	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b29a      	uxth	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 35d0 	ldrb.w	r3, [r3, #1488]	; 0x5d0
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 35d1 	ldrb.w	r3, [r3, #1489]	; 0x5d1
 800272c:	b29b      	uxth	r3, r3
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b29b      	uxth	r3, r3
 8002732:	4413      	add	r3, r2
 8002734:	b29a      	uxth	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 35d2 	ldrb.w	r3, [r3, #1490]	; 0x5d2
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 35d3 	ldrb.w	r3, [r3, #1491]	; 0x5d3
 8002748:	b29b      	uxth	r3, r3
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	b29b      	uxth	r3, r3
 800274e:	4413      	add	r3, r2
 8002750:	b29a      	uxth	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	88db      	ldrh	r3, [r3, #6]
 800275a:	461a      	mov	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  
  DCD_EP_Stall(pdev , 0x80);
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f001 fb2c 	bl	8003de0 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8002788:	2100      	movs	r1, #0
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f001 fb28 	bl	8003de0 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f001 f92d 	bl	80039f0 <USB_OTG_EP0_OutStart>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d033      	beq.n	800281c <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f835 	bl	8002824 <USBD_GetLen>
 80027ba:	4603      	mov	r3, r0
 80027bc:	3301      	adds	r3, #1
 80027be:	b29b      	uxth	r3, r3
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	75fa      	strb	r2, [r7, #23]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4413      	add	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	8812      	ldrh	r2, [r2, #0]
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	75fa      	strb	r2, [r7, #23]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4413      	add	r3, r2
 80027e8:	2203      	movs	r2, #3
 80027ea:	701a      	strb	r2, [r3, #0]
    
    while (*desc != 0)
 80027ec:	e012      	b.n	8002814 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	75fa      	strb	r2, [r7, #23]
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	441a      	add	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1c59      	adds	r1, r3, #1
 80027fe:	60f9      	str	r1, [r7, #12]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	75fa      	strb	r2, [r7, #23]
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4413      	add	r3, r2
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
    while (*desc != 0)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e8      	bne.n	80027ee <USBD_GetString+0x50>
    }
  } 
}
 800281c:	bf00      	nop
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]

    while (*buf != 0)
 8002830:	e005      	b.n	800283e <USBD_GetLen+0x1a>
    {
        len++;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	3301      	adds	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
        buf++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3301      	adds	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
    while (*buf != 0)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f5      	bne.n	8002832 <USBD_GetLen+0xe>
    }

    return len;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002872:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 800287c:	7b7b      	ldrb	r3, [r7, #13]
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	619a      	str	r2, [r3, #24]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 80028ac:	2003      	movs	r0, #3
 80028ae:	f002 fbb7 	bl	8005020 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <USB_OTG_CoreReset+0x8c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e026      	b.n	800291a <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0e9      	beq.n	80028ac <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	3301      	adds	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4a09      	ldr	r2, [pc, #36]	; (8002924 <USB_OTG_CoreReset+0x8c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d806      	bhi.n	8002910 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d0ee      	beq.n	80028ec <USB_OTG_CoreReset+0x54>
 800290e:	e000      	b.n	8002912 <USB_OTG_CoreReset+0x7a>
      break;
 8002910:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8002912:	2003      	movs	r0, #3
 8002914:	f002 fb84 	bl	8005020 <USB_OTG_BSP_uDelay>
  return status;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	00030d40 	.word	0x00030d40

08002928 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	460b      	mov	r3, r1
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	4613      	mov	r3, r2
 800293c:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	78db      	ldrb	r3, [r3, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d122      	bne.n	8002990 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	3303      	adds	r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	da00      	bge.n	800295c <USB_OTG_WritePacket+0x34>
 800295a:	3303      	adds	r3, #3
 800295c:	109b      	asrs	r3, r3, #2
 800295e:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	3332      	adds	r3, #50	; 0x32
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e009      	b.n	8002988 <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < count32b; i++, src+=4)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	3304      	adds	r3, #4
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3f1      	bcc.n	8002974 <USB_OTG_WritePacket+0x4c>
    }
  }
  return status;
 8002990:	7efb      	ldrb	r3, [r7, #27]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 800299e:	b480      	push	{r7}
 80029a0:	b089      	sub	sp, #36	; 0x24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	3303      	adds	r3, #3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da00      	bge.n	80029ba <USB_OTG_ReadPacket+0x1c>
 80029b8:	3303      	adds	r3, #3
 80029ba:	109b      	asrs	r3, r3, #2
 80029bc:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80029c4:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e009      	b.n	80029e0 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3301      	adds	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3304      	adds	r3, #4
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3f1      	bcc.n	80029cc <USB_OTG_ReadPacket+0x2e>
    
  }
  return ((void *)dest);
 80029e8:	68bb      	ldr	r3, [r7, #8]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d113      	bne.n	8002a4c <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8002a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a28:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2208      	movs	r2, #8
 8002a34:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a42:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	721a      	strb	r2, [r3, #8]
 8002a4a:	e011      	b.n	8002a70 <USB_OTG_SelectCore+0x78>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10e      	bne.n	8002a70 <USB_OTG_SelectCore+0x78>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8002a52:	4b45      	ldr	r3, [pc, #276]	; (8002b68 <USB_OTG_SelectCore+0x170>)
 8002a54:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	220c      	movs	r2, #12
 8002a60:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2206      	movs	r2, #6
 8002a66:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002a6e:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e01c      	b.n	8002ac2 <USB_OTG_SelectCore+0xca>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8002a94:	4619      	mov	r1, r3
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	6099      	str	r1, [r3, #8]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8002aae:	4619      	mov	r1, r3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	6059      	str	r1, [r3, #4]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d8dc      	bhi.n	8002a88 <USB_OTG_SelectCore+0x90>
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e00f      	b.n	8002b0e <USB_OTG_SelectCore+0x116>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	015a      	lsls	r2, r3, #5
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8002afa:	4619      	mov	r1, r3
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3322      	adds	r3, #34	; 0x22
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d8e9      	bhi.n	8002aee <USB_OTG_SelectCore+0xf6>
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e00f      	b.n	8002b40 <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	031a      	lsls	r2, r3, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3332      	adds	r3, #50	; 0x32
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d8e9      	bhi.n	8002b20 <USB_OTG_SelectCore+0x128>
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40040000 	.word	0x40040000

08002b6c <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7a1b      	ldrb	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d142      	bne.n	8002c12 <USB_OTG_CoreInit+0xa6>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 8002b94:	7bbb      	ldrb	r3, [r7, #14]
 8002b96:	f36f 0300 	bfc	r3, #0, #1
 8002b9a:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7a5b      	ldrb	r3, [r3, #9]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8002ba4:	7bbb      	ldrb	r3, [r7, #14]
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 8002bc0:	7c3b      	ldrb	r3, [r7, #16]
 8002bc2:	f36f 1386 	bfc	r3, #6, #1
 8002bc6:	743b      	strb	r3, [r7, #16]
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8002bc8:	7cbb      	ldrb	r3, [r7, #18]
 8002bca:	f36f 1386 	bfc	r3, #6, #1
 8002bce:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 8002bd0:	7cbb      	ldrb	r3, [r7, #18]
 8002bd2:	f36f 0341 	bfc	r3, #1, #1
 8002bd6:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 8002bd8:	7cbb      	ldrb	r3, [r7, #18]
 8002bda:	f36f 03c3 	bfc	r3, #3, #1
 8002bde:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fe55 	bl	8002898 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	78db      	ldrb	r3, [r3, #3]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d139      	bne.n	8002c6a <USB_OTG_CoreInit+0xfe>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8002bf6:	7a3b      	ldrb	r3, [r7, #8]
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	f362 0344 	bfi	r3, r2, #1, #4
 8002bfe:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 8002c00:	7a3b      	ldrb	r3, [r7, #8]
 8002c02:	f043 0320 	orr.w	r3, r3, #32
 8002c06:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e02b      	b.n	8002c6a <USB_OTG_CoreInit+0xfe>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 8002c1a:	7c3b      	ldrb	r3, [r7, #16]
 8002c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c20:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fe34 	bl	8002898 <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	f043 0308 	orr.w	r3, r3, #8
 8002c4a:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7a5b      	ldrb	r3, [r3, #9]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <USB_OTG_CoreInit+0xf0>
    {
      gccfg.b.sofouten = 1;  
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	f043 0310 	orr.w	r3, r3, #16
 8002c5a:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8002c64:	2014      	movs	r0, #20
 8002c66:	f002 f9ff 	bl	8005068 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	78db      	ldrb	r3, [r3, #3]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d110      	bne.n	8002c94 <USB_OTG_CoreInit+0x128>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8002c7a:	7a3b      	ldrb	r3, [r7, #8]
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	f362 0344 	bfi	r3, r2, #1, #4
 8002c82:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 8002c84:	7a3b      	ldrb	r3, [r7, #8]
 8002c86:	f043 0320 	orr.w	r3, r3, #32
 8002c8a:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8002cae:	7a3b      	ldrb	r3, [r7, #8]
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	6891      	ldr	r1, [r2, #8]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
  return status;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8002ce4:	7a3b      	ldrb	r3, [r7, #8]
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68d2      	ldr	r2, [r2, #12]
 8002cf4:	6891      	ldr	r1, [r2, #8]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	43d2      	mvns	r2, r2
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  return status;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f362 138a 	bfi	r3, r2, #6, #5
 8002d3a:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <USB_OTG_FlushTxFifo+0x70>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d806      	bhi.n	8002d68 <USB_OTG_FlushTxFifo+0x5c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d0ee      	beq.n	8002d44 <USB_OTG_FlushTxFifo+0x38>
 8002d66:	e000      	b.n	8002d6a <USB_OTG_FlushTxFifo+0x5e>
      break;
 8002d68:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	f002 f958 	bl	8005020 <USB_OTG_BSP_uDelay>
  return status;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	00030d40 	.word	0x00030d40

08002d80 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f043 0310 	orr.w	r3, r3, #16
 8002d9a:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <USB_OTG_FlushRxFifo+0x5c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d806      	bhi.n	8002dc8 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d0ee      	beq.n	8002da4 <USB_OTG_FlushRxFifo+0x24>
 8002dc6:	e000      	b.n	8002dca <USB_OTG_FlushRxFifo+0x4a>
      break;
 8002dc8:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f002 f928 	bl	8005020 <USB_OTG_BSP_uDelay>
  return status;
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00030d40 	.word	0x00030d40

08002de0 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	f36f 1345 	bfc	r3, #5, #1
 8002dfe:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	f36f 1386 	bfc	r3, #6, #1
 8002e06:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d104      	bne.n	8002e18 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f043 0320 	orr.w	r3, r3, #32
 8002e14:	72fb      	strb	r3, [r7, #11]
 8002e16:	e006      	b.n	8002e26 <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e24:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8002e2e:	2032      	movs	r0, #50	; 0x32
 8002e30:	f002 f91a 	bl	8005068 <USB_OTG_BSP_mDelay>
  return status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ffea 	bl	8002e3e <USB_OTG_GetMode>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  return v;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	7b3b      	ldrb	r3, [r7, #12]
 8002eca:	f362 0301 	bfi	r3, r2, #0, #2
 8002ece:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	601a      	str	r2, [r3, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	; 0x30
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8002f18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002f1c:	f36f 03c4 	bfc	r3, #3, #2
 8002f20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	601a      	str	r2, [r3, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7adb      	ldrb	r3, [r3, #11]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d133      	bne.n	8002f9c <USB_OTG_CoreInitDev+0xb8>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8002f34:	2103      	movs	r1, #3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffb8 	bl	8002eac <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8002f44:	2340      	movs	r3, #64	; 0x40
 8002f46:	83fb      	strh	r3, [r7, #30]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	83bb      	strh	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8002f54:	8bba      	ldrh	r2, [r7, #28]
 8002f56:	8bfb      	ldrh	r3, [r7, #30]
 8002f58:	4413      	add	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8002f6c:	8b3a      	ldrh	r2, [r7, #24]
 8002f6e:	8b7b      	ldrh	r3, [r7, #26]
 8002f70:	4413      	add	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8002f84:	8b3a      	ldrh	r2, [r7, #24]
 8002f86:	8b7b      	ldrh	r3, [r7, #26]
 8002f88:	4413      	add	r3, r2
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff feb4 	bl	8002d0c <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff feeb 	bl	8002d80 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc2:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd0:	e03a      	b.n	8003048 <USB_OTG_CoreInitDev+0x164>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 8002fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00e      	beq.n	800300e <USB_OTG_CoreInitDev+0x12a>
    {
      depctl.d32 = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 8002ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      depctl.b.snak = 1;
 8003000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003004:	f043 0308 	orr.w	r3, r3, #8
 8003008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800300c:	e001      	b.n	8003012 <USB_OTG_CoreInitDev+0x12e>
    }
    else
    {
      depctl.d32 = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	3304      	adds	r3, #4
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	3304      	adds	r3, #4
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	3304      	adds	r3, #4
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	22ff      	movs	r2, #255	; 0xff
 8003040:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	3301      	adds	r3, #1
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	461a      	mov	r2, r3
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	d8be      	bhi.n	8002fd2 <USB_OTG_CoreInitDev+0xee>
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003058:	e035      	b.n	80030c6 <USB_OTG_CoreInitDev+0x1e2>
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	3314      	adds	r3, #20
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]
    if (depctl.b.epena)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <USB_OTG_CoreInitDev+0x1a8>
    {
      depctl.d32 = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
      depctl.b.epdis = 1;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003080:	73fb      	strb	r3, [r7, #15]
      depctl.b.snak = 1;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e001      	b.n	8003090 <USB_OTG_CoreInitDev+0x1ac>
    }
    else
    {
      depctl.d32 = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	3314      	adds	r3, #20
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	3314      	adds	r3, #20
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	3314      	adds	r3, #20
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	609a      	str	r2, [r3, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	3301      	adds	r3, #1
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	461a      	mov	r2, r3
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d8c3      	bhi.n	800305a <USB_OTG_CoreInitDev+0x176>
  }
  msk.d32 = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 80030d6:	7d7b      	ldrb	r3, [r7, #21]
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	757b      	strb	r3, [r7, #21]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6912      	ldr	r2, [r2, #16]
 80030e6:	6911      	ldr	r1, [r2, #16]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	43d2      	mvns	r2, r2
 80030ec:	4011      	ands	r1, r2
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	78db      	ldrb	r3, [r3, #3]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d11b      	bne.n	8003134 <USB_OTG_CoreInitDev+0x250>
  {
    dthrctl.d32 = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 8003100:	7c3b      	ldrb	r3, [r7, #16]
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	743b      	strb	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 8003108:	7c3b      	ldrb	r3, [r7, #16]
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	743b      	strb	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 8003110:	8a3b      	ldrh	r3, [r7, #16]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	f362 038a 	bfi	r3, r2, #2, #9
 8003118:	823b      	strh	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 800311a:	7cbb      	ldrb	r3, [r7, #18]
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	74bb      	strb	r3, [r7, #18]
    dthrctl.b.rx_thr_len = 64;
 8003122:	8a7b      	ldrh	r3, [r7, #18]
 8003124:	2240      	movs	r2, #64	; 0x40
 8003126:	f362 0349 	bfi	r3, r2, #1, #9
 800312a:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f806 	bl	8003146 <USB_OTG_EnableDevInt>
  return status;
 800313a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800313e:	4618      	mov	r0, r3
 8003140:	3730      	adds	r7, #48	; 0x30
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003166:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff fb73 	bl	8002854 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	78db      	ldrb	r3, [r3, #3]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <USB_OTG_EnableDevInt+0x38>
  {
    intmsk.b.rxstsqlvl = 1;
 8003176:	7a3b      	ldrb	r3, [r7, #8]
 8003178:	f043 0310 	orr.w	r3, r3, #16
 800317c:	723b      	strb	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 800317e:	7a7b      	ldrb	r3, [r7, #9]
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	727b      	strb	r3, [r7, #9]
  intmsk.b.usbreset   = 1;
 8003186:	7a7b      	ldrb	r3, [r7, #9]
 8003188:	f043 0310 	orr.w	r3, r3, #16
 800318c:	727b      	strb	r3, [r7, #9]
  intmsk.b.enumdone   = 1;
 800318e:	7a7b      	ldrb	r3, [r7, #9]
 8003190:	f043 0320 	orr.w	r3, r3, #32
 8003194:	727b      	strb	r3, [r7, #9]
  intmsk.b.inepintr   = 1;
 8003196:	7abb      	ldrb	r3, [r7, #10]
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	72bb      	strb	r3, [r7, #10]
  intmsk.b.outepintr  = 1;
 800319e:	7abb      	ldrb	r3, [r7, #10]
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	72bb      	strb	r3, [r7, #10]
  intmsk.b.sofintr    = 1; 
 80031a6:	7a3b      	ldrb	r3, [r7, #8]
 80031a8:	f043 0308 	orr.w	r3, r3, #8
 80031ac:	723b      	strb	r3, [r7, #8]
  
  intmsk.b.incomplisoin    = 1; 
 80031ae:	7abb      	ldrb	r3, [r7, #10]
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	72bb      	strb	r3, [r7, #10]
  intmsk.b.incomplisoout    = 1;   
 80031b6:	7abb      	ldrb	r3, [r7, #10]
 80031b8:	f043 0320 	orr.w	r3, r3, #32
 80031bc:	72bb      	strb	r3, [r7, #10]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
 80031be:	7afb      	ldrb	r3, [r7, #11]
 80031c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c4:	72fb      	strb	r3, [r7, #11]
  intmsk.b.otgintr    = 1;    
 80031c6:	7a3b      	ldrb	r3, [r7, #8]
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	723b      	strb	r3, [r7, #8]
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	6991      	ldr	r1, [r2, #24]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	43d2      	mvns	r2, r2
 80031dc:	4011      	ands	r1, r2
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]
  return status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 8003202:	7a3b      	ldrb	r3, [r7, #8]
 8003204:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d009      	beq.n	8003222 <USB_OTG_GetDeviceSpeed+0x34>
 800320e:	2b03      	cmp	r3, #3
 8003210:	d004      	beq.n	800321c <USB_OTG_GetDeviceSpeed+0x2e>
 8003212:	2b01      	cmp	r3, #1
 8003214:	d002      	beq.n	800321c <USB_OTG_GetDeviceSpeed+0x2e>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8003216:	2303      	movs	r3, #3
 8003218:	73fb      	strb	r3, [r7, #15]
    break;
 800321a:	e005      	b.n	8003228 <USB_OTG_GetDeviceSpeed+0x3a>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 800321c:	2302      	movs	r3, #2
 800321e:	73fb      	strb	r3, [r7, #15]
    break;
 8003220:	e002      	b.n	8003228 <USB_OTG_GetDeviceSpeed+0x3a>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
    break;
 8003226:	bf00      	nop
  }
  
  return speed;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8003256:	7c3b      	ldrb	r3, [r7, #16]
 8003258:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d004      	beq.n	800326c <USB_OTG_EP0Activate+0x36>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8003262:	89bb      	ldrh	r3, [r7, #12]
 8003264:	f36f 030a 	bfc	r3, #0, #11
 8003268:	81bb      	strh	r3, [r7, #12]
    break;
 800326a:	e005      	b.n	8003278 <USB_OTG_EP0Activate+0x42>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 800326c:	89bb      	ldrh	r3, [r7, #12]
 800326e:	2203      	movs	r2, #3
 8003270:	f362 030a 	bfi	r3, r2, #0, #11
 8003274:	81bb      	strh	r3, [r7, #12]
    break;
 8003276:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 8003280:	7a7b      	ldrb	r3, [r7, #9]
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	727b      	strb	r3, [r7, #9]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6912      	ldr	r2, [r2, #16]
 8003290:	6851      	ldr	r1, [r2, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	43d2      	mvns	r2, r2
 8003296:	4011      	ands	r1, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  return status;
 800329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10f      	bne.n	80032ea <USB_OTG_EPActivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	2301      	movs	r3, #1
 80032e2:	4093      	lsls	r3, r2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	813b      	strh	r3, [r7, #8]
 80032e8:	e00e      	b.n	8003308 <USB_OTG_EPActivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	3314      	adds	r3, #20
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	2301      	movs	r3, #1
 8003302:	4093      	lsls	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 800330e:	7b7b      	ldrb	r3, [r7, #13]
 8003310:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d127      	bne.n	800336a <USB_OTG_EPActivate+0xbe>
  {
    depctl.b.mps    = ep->maxpacket;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003324:	b29a      	uxth	r2, r3
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	f362 030a 	bfi	r3, r2, #0, #11
 800332c:	81bb      	strh	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	78db      	ldrb	r3, [r3, #3]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	f362 0383 	bfi	r3, r2, #2, #2
 800333e:	73bb      	strb	r3, [r7, #14]
    depctl.b.txfnum = ep->tx_fifo_num;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	88db      	ldrh	r3, [r3, #6]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	b2da      	uxtb	r2, r3
 800334c:	89fb      	ldrh	r3, [r7, #14]
 800334e:	f362 1389 	bfi	r3, r2, #6, #4
 8003352:	81fb      	strh	r3, [r7, #14]
    depctl.b.setd0pid = 1;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	f043 0310 	orr.w	r3, r3, #16
 800335a:	73fb      	strb	r3, [r7, #15]
    depctl.b.usbactep = 1;
 800335c:	7b7b      	ldrb	r3, [r7, #13]
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6912      	ldr	r2, [r2, #16]
 8003372:	69d1      	ldr	r1, [r2, #28]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	430a      	orrs	r2, r1
 8003378:	61da      	str	r2, [r3, #28]
  return status;
 800337a:	7cfb      	ldrb	r3, [r7, #19]
}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10f      	bne.n	80033c6 <USB_OTG_EPDeactivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	2301      	movs	r3, #1
 80033be:	4093      	lsls	r3, r2
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	813b      	strh	r3, [r7, #8]
 80033c4:	e00e      	b.n	80033e4 <USB_OTG_EPDeactivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	3314      	adds	r3, #20
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	2301      	movs	r3, #1
 80033de:	4093      	lsls	r3, r2
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 80033e4:	7b7b      	ldrb	r3, [r7, #13]
 80033e6:	f36f 13c7 	bfc	r3, #7, #1
 80033ea:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6912      	ldr	r2, [r2, #16]
 80033fa:	69d1      	ldr	r1, [r2, #28]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	43d2      	mvns	r2, r2
 8003400:	400a      	ands	r2, r1
 8003402:	61da      	str	r2, [r3, #28]
  return status;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
}
 8003406:	4618      	mov	r0, r3
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b088      	sub	sp, #32
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	2b01      	cmp	r3, #1
 8003432:	f040 80ab 	bne.w	800358c <USB_OTG_EPStartXfer+0x17a>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <USB_OTG_EPStartXfer+0x64>
    {
      deptsiz.b.xfersize = 0;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f36f 0312 	bfc	r3, #0, #19
 8003468:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 800346a:	8a7b      	ldrh	r3, [r7, #18]
 800346c:	2201      	movs	r2, #1
 800346e:	f362 03cc 	bfi	r3, r2, #3, #10
 8003472:	827b      	strh	r3, [r7, #18]
 8003474:	e022      	b.n	80034bc <USB_OTG_EPStartXfer+0xaa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f362 0312 	bfi	r3, r2, #0, #19
 8003484:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4413      	add	r3, r2
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	8a7b      	ldrh	r3, [r7, #18]
 80034a4:	f362 03cc 	bfi	r3, r2, #3, #10
 80034a8:	827b      	strh	r3, [r7, #18]
      
      if (ep->type == EP_TYPE_ISOC)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	78db      	ldrb	r3, [r3, #3]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d104      	bne.n	80034bc <USB_OTG_EPStartXfer+0xaa>
      {
        deptsiz.b.mc = 1;
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f362 1346 	bfi	r3, r2, #5, #2
 80034ba:	74fb      	strb	r3, [r7, #19]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	78db      	ldrb	r3, [r3, #3]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10a      	bne.n	80034ec <USB_OTG_EPStartXfer+0xda>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	6912      	ldr	r2, [r2, #16]
 80034e8:	615a      	str	r2, [r3, #20]
 80034ea:	e015      	b.n	8003518 <USB_OTG_EPStartXfer+0x106>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d011      	beq.n	8003518 <USB_OTG_EPStartXfer+0x106>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <USB_OTG_EPStartXfer+0x106>
        {
          fifoemptymsk = 1 << ep->num;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	4093      	lsls	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6912      	ldr	r2, [r2, #16]
 8003510:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	430a      	orrs	r2, r1
 8003516:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	78db      	ldrb	r3, [r3, #3]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d114      	bne.n	800354a <USB_OTG_EPStartXfer+0x138>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800352e:	b29b      	uxth	r3, r3
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <USB_OTG_EPStartXfer+0x130>
      {
        depctl.b.setd1pid = 1;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	f043 0320 	orr.w	r3, r3, #32
 800353e:	75fb      	strb	r3, [r7, #23]
 8003540:	e003      	b.n	800354a <USB_OTG_EPStartXfer+0x138>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	f043 0310 	orr.w	r3, r3, #16
 8003548:	75fb      	strb	r3, [r7, #23]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003558:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	601a      	str	r2, [r3, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	78db      	ldrb	r3, [r3, #3]
 8003570:	2b01      	cmp	r3, #1
 8003572:	f040 8089 	bne.w	8003688 <USB_OTG_EPStartXfer+0x276>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68d9      	ldr	r1, [r3, #12]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	b29b      	uxth	r3, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff f9cf 	bl	8002928 <USB_OTG_WritePacket>
 800358a:	e07d      	b.n	8003688 <USB_OTG_EPStartXfer+0x276>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	3314      	adds	r3, #20
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	3314      	adds	r3, #20
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <USB_OTG_EPStartXfer+0x1c2>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f362 0312 	bfi	r3, r2, #0, #19
 80035c6:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 80035c8:	8a7b      	ldrh	r3, [r7, #18]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f362 03cc 	bfi	r3, r2, #3, #10
 80035d0:	827b      	strh	r3, [r7, #18]
 80035d2:	e020      	b.n	8003616 <USB_OTG_EPStartXfer+0x204>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	8a7b      	ldrh	r3, [r7, #18]
 80035f2:	f362 03cc 	bfi	r3, r2, #3, #10
 80035f6:	827b      	strh	r3, [r7, #18]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 80035f8:	8a7b      	ldrh	r3, [r7, #18]
 80035fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	fb03 f302 	mul.w	r3, r3, r2
 800360a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f362 0312 	bfi	r3, r2, #0, #19
 8003614:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	3314      	adds	r3, #20
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	78db      	ldrb	r3, [r3, #3]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d109      	bne.n	8003644 <USB_OTG_EPStartXfer+0x232>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	3314      	adds	r3, #20
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	6912      	ldr	r2, [r2, #16]
 8003642:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	78db      	ldrb	r3, [r3, #3]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d10c      	bne.n	8003666 <USB_OTG_EPStartXfer+0x254>
    {
      if (ep->even_odd_frame)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	795b      	ldrb	r3, [r3, #5]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <USB_OTG_EPStartXfer+0x24c>
      {
        depctl.b.setd1pid = 1;
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	f043 0320 	orr.w	r3, r3, #32
 800365a:	75fb      	strb	r3, [r7, #23]
 800365c:	e003      	b.n	8003666 <USB_OTG_EPStartXfer+0x254>
      }
      else
      {
        depctl.b.setd0pid = 1;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	f043 0310 	orr.w	r3, r3, #16
 8003664:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003674:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	3314      	adds	r3, #20
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003688:	7ffb      	ldrb	r3, [r7, #31]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003692:	b480      	push	{r7}
 8003694:	b089      	sub	sp, #36	; 0x24
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d170      	bne.n	8003796 <USB_OTG_EP0StartXfer+0x104>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <USB_OTG_EP0StartXfer+0x50>
    {
      deptsiz.b.xfersize = 0;
 80036ce:	7a3b      	ldrb	r3, [r7, #8]
 80036d0:	f36f 0306 	bfc	r3, #0, #7
 80036d4:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80036d6:	7abb      	ldrb	r3, [r7, #10]
 80036d8:	2201      	movs	r2, #1
 80036da:	f362 03c4 	bfi	r3, r2, #3, #2
 80036de:	72bb      	strb	r3, [r7, #10]
 80036e0:	e023      	b.n	800372a <USB_OTG_EP0StartXfer+0x98>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d90e      	bls.n	800370c <USB_OTG_EP0StartXfer+0x7a>
      {
        ep->xfer_len = ep->maxpacket;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003700:	b2da      	uxtb	r2, r3
 8003702:	7a3b      	ldrb	r3, [r7, #8]
 8003704:	f362 0306 	bfi	r3, r2, #0, #7
 8003708:	723b      	strb	r3, [r7, #8]
 800370a:	e009      	b.n	8003720 <USB_OTG_EP0StartXfer+0x8e>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003716:	b2da      	uxtb	r2, r3
 8003718:	7a3b      	ldrb	r3, [r7, #8]
 800371a:	f362 0306 	bfi	r3, r2, #0, #7
 800371e:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 8003720:	7abb      	ldrb	r3, [r7, #10]
 8003722:	2201      	movs	r2, #1
 8003724:	f362 03c4 	bfi	r3, r2, #3, #2
 8003728:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	78db      	ldrb	r3, [r3, #3]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d109      	bne.n	800374c <USB_OTG_EP0StartXfer+0xba>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	6912      	ldr	r2, [r2, #16]
 800374a:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	78db      	ldrb	r3, [r3, #3]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d176      	bne.n	8003858 <USB_OTG_EP0StartXfer+0x1c6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d072      	beq.n	8003858 <USB_OTG_EP0StartXfer+0x1c6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	2301      	movs	r3, #1
 800377a:	4093      	lsls	r3, r2
 800377c:	461a      	mov	r2, r3
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6912      	ldr	r2, [r2, #16]
 800378c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	430a      	orrs	r2, r1
 8003792:	635a      	str	r2, [r3, #52]	; 0x34
 8003794:	e060      	b.n	8003858 <USB_OTG_EP0StartXfer+0x1c6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	3314      	adds	r3, #20
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	3314      	adds	r3, #20
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <USB_OTG_EP0StartXfer+0x150>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	7a3b      	ldrb	r3, [r7, #8]
 80037d0:	f362 0306 	bfi	r3, r2, #0, #7
 80037d4:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80037d6:	7abb      	ldrb	r3, [r7, #10]
 80037d8:	2201      	movs	r2, #1
 80037da:	f362 03c4 	bfi	r3, r2, #3, #2
 80037de:	72bb      	strb	r3, [r7, #10]
 80037e0:	e012      	b.n	8003808 <USB_OTG_EP0StartXfer+0x176>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	7a3b      	ldrb	r3, [r7, #8]
 80037f8:	f362 0306 	bfi	r3, r2, #0, #7
 80037fc:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80037fe:	7abb      	ldrb	r3, [r7, #10]
 8003800:	2201      	movs	r2, #1
 8003802:	f362 03c4 	bfi	r3, r2, #3, #2
 8003806:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	3314      	adds	r3, #20
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	78db      	ldrb	r3, [r3, #3]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d109      	bne.n	8003836 <USB_OTG_EP0StartXfer+0x1a4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	3314      	adds	r3, #20
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	6912      	ldr	r2, [r2, #16]
 8003834:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003844:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	3314      	adds	r3, #20
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 8003858:	7ffb      	ldrb	r3, [r7, #31]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003866:	b480      	push	{r7}
 8003868:	b087      	sub	sp, #28
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	785b      	ldrb	r3, [r3, #1]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d11c      	bne.n	80038ba <USB_OTG_EPSetStall+0x54>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <USB_OTG_EPSetStall+0x44>
    {
      depctl.b.epdis = 1;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	73fb      	strb	r3, [r7, #15]
    }
    depctl.b.stall = 1;
 80038aa:	7bbb      	ldrb	r3, [r7, #14]
 80038ac:	f043 0320 	orr.w	r3, r3, #32
 80038b0:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e011      	b.n	80038de <USB_OTG_EPSetStall+0x78>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	3314      	adds	r3, #20
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 80038d0:	7bbb      	ldrb	r3, [r7, #14]
 80038d2:	f043 0320 	orr.w	r3, r3, #32
 80038d6:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	601a      	str	r2, [r3, #0]
  }
  return status;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d108      	bne.n	8003918 <USB_OTG_EPClearStall+0x2c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e007      	b.n	8003928 <USB_OTG_EPClearStall+0x3c>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	3314      	adds	r3, #20
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 800392e:	7bbb      	ldrb	r3, [r7, #14]
 8003930:	f36f 1345 	bfc	r3, #5, #1
 8003934:	73bb      	strb	r3, [r7, #14]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	78db      	ldrb	r3, [r3, #3]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d003      	beq.n	8003946 <USB_OTG_EPClearStall+0x5a>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	78db      	ldrb	r3, [r3, #3]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <USB_OTG_EPClearStall+0x62>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	f043 0310 	orr.w	r3, r3, #16
 800394c:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	601a      	str	r2, [r3, #0]
  return status;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
}
 8003956:	4618      	mov	r0, r3
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0c1b      	lsrs	r3, r3, #16
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	3314      	adds	r3, #20
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  return v;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	b29b      	uxth	r3, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a02:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 8003a04:	7cbb      	ldrb	r3, [r7, #18]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f362 03c4 	bfi	r3, r2, #3, #2
 8003a0c:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 8003a0e:	7c3b      	ldrb	r3, [r7, #16]
 8003a10:	2218      	movs	r2, #24
 8003a12:	f362 0306 	bfi	r3, r2, #0, #7
 8003a16:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	78db      	ldrb	r3, [r3, #3]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d116      	bne.n	8003a56 <USB_OTG_EP0_OutStart+0x66>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	f202 52cc 	addw	r2, r2, #1484	; 0x5cc
 8003a36:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	73fb      	strb	r3, [r7, #15]
    doepctl.d32 = 0x80008000;
 8003a48:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003a4c:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	601a      	str	r2, [r3, #0]
  }
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <USB_OTG_UngateClock>:
* @brief  USB_OTG_UngateClock : active USB Core clock
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  if(pdev->cfg.low_power)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7a9b      	ldrb	r3, [r3, #10]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01b      	beq.n	8003aaa <USB_OTG_UngateClock+0x48>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60fb      	str	r3, [r7, #12]
    
    if(dsts.b.suspsts == 1)
 8003a7a:	7b3b      	ldrb	r3, [r7, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d011      	beq.n	8003aaa <USB_OTG_UngateClock+0x48>
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60bb      	str	r3, [r7, #8]
      power.b.gatehclk = 0;
 8003a90:	7a3b      	ldrb	r3, [r7, #8]
 8003a92:	f36f 0341 	bfc	r3, #1, #1
 8003a96:	723b      	strb	r3, [r7, #8]
      power.b.stoppclk = 0;
 8003a98:	7a3b      	ldrb	r3, [r7, #8]
 8003a9a:	f36f 0300 	bfc	r3, #0, #1
 8003a9e:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	601a      	str	r2, [r3, #0]
      
    }
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fe ff96 	bl	80029f8 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e024      	b.n	8003b2c <DCD_Init+0x76>
  {
    ep = &pdev->dev.in_ep[i];
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2201      	movs	r2, #1
 8003afc:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2240      	movs	r2, #64	; 0x40
 8003b18:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2200      	movs	r2, #0
 8003b24:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	461a      	mov	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d8d4      	bhi.n	8003ae2 <DCD_Init+0x2c>
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e024      	b.n	8003b88 <DCD_Init+0xd2>
  {
    ep = &pdev->dev.out_ep[i];
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3301      	adds	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	785b      	ldrb	r3, [r3, #1]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d8d4      	bhi.n	8003b3e <DCD_Init+0x88>
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff f89d 	bl	8002cd4 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe ffe6 	bl	8002b6c <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff f91c 	bl	8002de0 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff f99b 	bl	8002ee4 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff f875 	bl	8002c9e <USB_OTG_EnableGlobalInt>
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	70fb      	strb	r3, [r7, #3]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	803b      	strh	r3, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	70bb      	strb	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da0d      	bge.n	8003bfa <DCD_EP_Open+0x3e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e00c      	b.n	8003c14 <DCD_EP_Open+0x58>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	3304      	adds	r3, #4
 8003c12:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	09db      	lsrs	r3, r3, #7
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8003c30:	883a      	ldrh	r2, [r7, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	78ba      	ldrb	r2, [r7, #2]
 8003c3a:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <DCD_EP_Open+0x92>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8003c4e:	78bb      	ldrb	r3, [r7, #2]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d102      	bne.n	8003c5a <DCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fb25 	bl	80032ac <USB_OTG_EPActivate>
  return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8003c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da0d      	bge.n	8003c9c <DCD_EP_Close+0x30>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e00c      	b.n	8003cb6 <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8003cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	09db      	lsrs	r3, r3, #7
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fb57 	bl	8003388 <USB_OTG_EPDeactivate>
  return 0;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	72fb      	strb	r3, [r7, #11]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	813b      	strh	r3, [r7, #8]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3304      	adds	r3, #4
 8003d10:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 8003d18:	893a      	ldrh	r2, [r7, #8]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
 8003d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	78db      	ldrb	r3, [r3, #3]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <DCD_EP_PrepareRx+0x60>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <DCD_EP_PrepareRx+0x72>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff fc9f 	bl	8003692 <USB_OTG_EP0StartXfer>
 8003d54:	e003      	b.n	8003d5e <DCD_EP_PrepareRx+0x7a>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fb5a 	bl	8003412 <USB_OTG_EPStartXfer>
  }
  return 0;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	460b      	mov	r3, r1
 8003d76:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8003d78:	7afb      	ldrb	r3, [r7, #11]
 8003d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3304      	adds	r3, #4
 8003d90:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2201      	movs	r2, #1
 8003d96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <DCD_EP_Tx+0x66>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8003dc4:	6979      	ldr	r1, [r7, #20]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff fc63 	bl	8003692 <USB_OTG_EP0StartXfer>
 8003dcc:	e003      	b.n	8003dd6 <DCD_EP_Tx+0x6e>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8003dce:	6979      	ldr	r1, [r7, #20]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fb1e 	bl	8003412 <USB_OTG_EPStartXfer>
  }
  return 0;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8003dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	da0d      	bge.n	8003e10 <DCD_EP_Stall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e00a      	b.n	8003e26 <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	09db      	lsrs	r3, r3, #7
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fd0b 	bl	8003866 <USB_OTG_EPSetStall>
  return (0);
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8003e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da0d      	bge.n	8003e8a <DCD_EP_ClrStall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	3304      	adds	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	e00a      	b.n	8003ea0 <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8003eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	09db      	lsrs	r3, r3, #7
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fd11 	bl	80038ec <USB_OTG_EPClearStall>
  return (0);
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <DCD_EP_Flush>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]

  if ((epnum & 0x80) == 0x80)
 8003ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da07      	bge.n	8003ef8 <DCD_EP_Flush+0x24>
  {
    USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7fe ff0b 	bl	8002d0c <USB_OTG_FlushTxFifo>
 8003ef6:	e002      	b.n	8003efe <DCD_EP_Flush+0x2a>
  }
  else
  {
    USB_OTG_FlushRxFifo(pdev);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fe ff41 	bl	8002d80 <USB_OTG_FlushRxFifo>
  }

  return (0);
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	89bb      	ldrh	r3, [r7, #12]
 8003f22:	f362 130a 	bfi	r3, r2, #4, #7
 8003f26:	81bb      	strh	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6912      	ldr	r2, [r2, #16]
 8003f30:	6811      	ldr	r1, [r2, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fe ff83 	bl	8002e5c <USB_OTG_IsDeviceMode>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80b6 	beq.w	80040ca <USBD_OTG_ISR_Handler+0x186>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fe ff8d 	bl	8002e7e <USB_OTG_ReadCoreItr>
 8003f64:	4603      	mov	r3, r0
 8003f66:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <USBD_OTG_ISR_Handler+0x2e>
    {
      return 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e0ac      	b.n	80040cc <USBD_OTG_ISR_Handler+0x188>
    }
    
    if (gintr_status.b.outepintr)
 8003f72:	7cbb      	ldrb	r3, [r7, #18]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <USBD_OTG_ISR_Handler+0x48>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa4c 	bl	800441c <DCD_HandleOutEP_ISR>
 8003f84:	4602      	mov	r2, r0
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 8003f8c:	7cbb      	ldrb	r3, [r7, #18]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <USBD_OTG_ISR_Handler+0x62>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f971 	bl	8004280 <DCD_HandleInEP_ISR>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 8003fa6:	7c3b      	ldrb	r3, [r7, #16]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <USBD_OTG_ISR_Handler+0x82>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 8003fb6:	7b3b      	ldrb	r3, [r7, #12]
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <USBD_OTG_ISR_Handler+0x9c>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8b6 	bl	8004144 <DCD_HandleResume_ISR>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8003fe0:	7c7b      	ldrb	r3, [r7, #17]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d006      	beq.n	8003ffa <USBD_OTG_ISR_Handler+0xb6>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8e9 	bl	80041c4 <DCD_HandleUSBSuspend_ISR>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8003ffa:	7c3b      	ldrb	r3, [r7, #16]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <USBD_OTG_ISR_Handler+0xd0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fab0 	bl	800456c <DCD_HandleSof_ISR>
 800400c:	4602      	mov	r2, r0
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8004014:	7c3b      	ldrb	r3, [r7, #16]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <USBD_OTG_ISR_Handler+0xea>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fabd 	bl	80045a0 <DCD_HandleRxStatusQueueLevel_ISR>
 8004026:	4602      	mov	r2, r0
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 800402e:	7c7b      	ldrb	r3, [r7, #17]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d006      	beq.n	8004048 <USBD_OTG_ISR_Handler+0x104>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fba4 	bl	8004788 <DCD_HandleUsbReset_ISR>
 8004040:	4602      	mov	r2, r0
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8004048:	7c7b      	ldrb	r3, [r7, #17]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <USBD_OTG_ISR_Handler+0x11e>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fc27 	bl	80048a8 <DCD_HandleEnumDone_ISR>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 8004062:	7cbb      	ldrb	r3, [r7, #18]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <USBD_OTG_ISR_Handler+0x138>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fc56 	bl	8004920 <DCD_IsoINIncomplete_ISR>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 800407c:	7cbb      	ldrb	r3, [r7, #18]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d006      	beq.n	8004096 <USBD_OTG_ISR_Handler+0x152>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fc63 	bl	8004954 <DCD_IsoOUTIncomplete_ISR>
 800408e:	4602      	mov	r2, r0
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
    }    
#ifdef VBUS_SENSING_ENABLED
    if (gintr_status.b.sessreqintr)
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <USBD_OTG_ISR_Handler+0x16c>
    {
      retval |= DCD_SessionRequest_ISR(pdev);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f816 	bl	80040d4 <DCD_SessionRequest_ISR>
 80040a8:	4602      	mov	r2, r0
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.otgintr)
 80040b0:	7c3b      	ldrb	r3, [r7, #16]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <USBD_OTG_ISR_Handler+0x186>
    {
      retval |= DCD_OTG_ISR(pdev);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f823 	bl	8004108 <DCD_OTG_ISR>
 80040c2:	4602      	mov	r2, r0
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
    }   
#endif    
  }
  return retval;
 80040ca:	697b      	ldr	r3, [r7, #20]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <DCD_SessionRequest_ISR>:
*         Indicates that the USB_OTG controller has detected a connection
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_SessionRequest_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;  
  USBD_DCD_INT_fops->DevConnected (pdev);
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <DCD_SessionRequest_ISR+0x30>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3

  /* Clear interrupt */
  gintsts.d32 = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  gintsts.b.sessreqintr = 1;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f0:	73fb      	strb	r3, [r7, #15]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);   
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	615a      	str	r2, [r3, #20]
  return 1;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000078 	.word	0x20000078

08004108 <DCD_OTG_ISR>:
*                 used to detect the end of session i.e. disconnection
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_OTG_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  USB_OTG_GOTGINT_TypeDef  gotgint;

  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	60fb      	str	r3, [r7, #12]
  
  if (gotgint.b.sesenddet)
 8004118:	7b3b      	ldrb	r3, [r7, #12]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <DCD_OTG_ISR+0x26>
  {
    USBD_DCD_INT_fops->DevDisconnected (pdev);
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <DCD_OTG_ISR+0x38>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
  }
  /* Clear OTG interrupt */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32); 
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]
  return 1;
 8004136:	2301      	movs	r3, #1
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000078 	.word	0x20000078

08004144 <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7a9b      	ldrb	r3, [r3, #10]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d011      	beq.n	8004178 <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 800415e:	7b3b      	ldrb	r3, [r7, #12]
 8004160:	f36f 0341 	bfc	r3, #1, #1
 8004164:	733b      	strb	r3, [r7, #12]
    power.b.stoppclk = 0;
 8004166:	7b3b      	ldrb	r3, [r7, #12]
 8004168:	f36f 0300 	bfc	r3, #0, #1
 800416c:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 800417c:	7c3b      	ldrb	r3, [r7, #16]
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6912      	ldr	r2, [r2, #16]
 800418c:	6851      	ldr	r1, [r2, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	43d2      	mvns	r2, r2
 8004192:	400a      	ands	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <DCD_HandleResume_ISR+0x7c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	75fb      	strb	r3, [r7, #23]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	615a      	str	r2, [r3, #20]
  return 1;
 80041b4:	2301      	movs	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000078 	.word	0x20000078

080041c4 <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	72fb      	strb	r3, [r7, #11]
  
  prev_status = pdev->dev.device_status;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80041d6:	72fb      	strb	r3, [r7, #11]
  USBD_DCD_INT_fops->Suspend (pdev);      
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <DCD_HandleUSBSuspend_ISR+0xb4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 80041ee:	7d7b      	ldrb	r3, [r7, #21]
 80041f0:	f043 0308 	orr.w	r3, r3, #8
 80041f4:	757b      	strb	r3, [r7, #21]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7a9b      	ldrb	r3, [r3, #10]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d032      	beq.n	800426c <DCD_HandleUSBSuspend_ISR+0xa8>
 8004206:	7b3b      	ldrb	r3, [r7, #12]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02c      	beq.n	800426c <DCD_HandleUSBSuspend_ISR+0xa8>
    (pdev->dev.connection_status == 1) && 
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8004218:	2b01      	cmp	r3, #1
 800421a:	d127      	bne.n	800426c <DCD_HandleUSBSuspend_ISR+0xa8>
    (prev_status  == USB_OTG_CONFIGURED))
 800421c:	7afb      	ldrb	r3, [r7, #11]
 800421e:	b2db      	uxtb	r3, r3
    (pdev->dev.connection_status == 1) && 
 8004220:	2b03      	cmp	r3, #3
 8004222:	d123      	bne.n	800426c <DCD_HandleUSBSuspend_ISR+0xa8>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 8004228:	7c3b      	ldrb	r3, [r7, #16]
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 800423c:	6811      	ldr	r1, [r2, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 8004244:	7c3b      	ldrb	r3, [r7, #16]
 8004246:	f043 0302 	orr.w	r3, r3, #2
 800424a:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8004258:	6811      	ldr	r1, [r2, #0]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8004260:	4a06      	ldr	r2, [pc, #24]	; (800427c <DCD_HandleUSBSuspend_ISR+0xb8>)
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <DCD_HandleUSBSuspend_ISR+0xb8>)
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f043 0306 	orr.w	r3, r3, #6
 800426a:	6113      	str	r3, [r2, #16]
  }
  return 1;
 800426c:	2301      	movs	r3, #1
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000078 	.word	0x20000078
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fb97 	bl	80039c4 <USB_OTG_ReadDevAllInEPItr>
 8004296:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8004298:	e0b4      	b.n	8004404 <DCD_HandleInEP_ISR+0x184>
  {
    if (ep_intr&0x1) /* In ITR */
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a9 	beq.w	80043f8 <DCD_HandleInEP_ISR+0x178>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fb6b 	bl	8004988 <DCD_ReadDevInEP>
 80042b2:	4603      	mov	r3, r0
 80042b4:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 80042b6:	7a3b      	ldrb	r3, [r7, #8]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d032      	beq.n	8004328 <DCD_HandleInEP_ISR+0xa8>
      {
        fifoemptymsk = 0x1 << epnum;
 80042c2:	2201      	movs	r2, #1
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6912      	ldr	r2, [r2, #16]
 80042d4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	43d2      	mvns	r2, r2
 80042da:	400a      	ands	r2, r1
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	7a3b      	ldrb	r3, [r7, #8]
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	723b      	strb	r3, [r7, #8]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3304      	adds	r3, #4
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <DCD_HandleInEP_ISR+0x198>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	4611      	mov	r1, r2
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	78db      	ldrb	r3, [r3, #3]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d10a      	bne.n	8004328 <DCD_HandleInEP_ISR+0xa8>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <DCD_HandleInEP_ISR+0xa8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800431e:	2b04      	cmp	r3, #4
 8004320:	d102      	bne.n	8004328 <DCD_HandleInEP_ISR+0xa8>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fb64 	bl	80039f0 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 8004328:	7a3b      	ldrb	r3, [r7, #8]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <DCD_HandleInEP_ISR+0xd0>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	7a3b      	ldrb	r3, [r7, #8]
 800433a:	f043 0308 	orr.w	r3, r3, #8
 800433e:	723b      	strb	r3, [r7, #8]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3304      	adds	r3, #4
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 8004350:	7a3b      	ldrb	r3, [r7, #8]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <DCD_HandleInEP_ISR+0xf8>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	7a3b      	ldrb	r3, [r7, #8]
 8004362:	f043 0310 	orr.w	r3, r3, #16
 8004366:	723b      	strb	r3, [r7, #8]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3304      	adds	r3, #4
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8004378:	7a3b      	ldrb	r3, [r7, #8]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <DCD_HandleInEP_ISR+0x120>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	7a3b      	ldrb	r3, [r7, #8]
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	723b      	strb	r3, [r7, #8]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	3304      	adds	r3, #4
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 80043a0:	7a3b      	ldrb	r3, [r7, #8]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <DCD_HandleInEP_ISR+0x148>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 80043ac:	2300      	movs	r3, #0
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	7a3b      	ldrb	r3, [r7, #8]
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	723b      	strb	r3, [r7, #8]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3304      	adds	r3, #4
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 80043c8:	7a3b      	ldrb	r3, [r7, #8]
 80043ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d011      	beq.n	80043f8 <DCD_HandleInEP_ISR+0x178>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f964 	bl	80046a4 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	7a3b      	ldrb	r3, [r7, #8]
 80043e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e6:	723b      	strb	r3, [r7, #8]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	3304      	adds	r3, #4
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	3301      	adds	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f47f af47 	bne.w	800429a <DCD_HandleInEP_ISR+0x1a>
  }
  
  return 1;
 800440c:	2301      	movs	r3, #1
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000078 	.word	0x20000078

0800441c <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fa98 	bl	8003962 <USB_OTG_ReadDevAllOutEp_itr>
 8004432:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8004434:	e08f      	b.n	8004556 <DCD_HandleOutEP_ISR+0x13a>
  {
    if (ep_intr&0x1)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8084 	beq.w	800454a <DCD_HandleOutEP_ISR+0x12e>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff faa0 	bl	800398e <USB_OTG_ReadDevOutEP_itr>
 800444e:	4603      	mov	r3, r0
 8004450:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8004452:	7b3b      	ldrb	r3, [r7, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d048      	beq.n	80044f0 <DCD_HandleOutEP_ISR+0xd4>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	7b3b      	ldrb	r3, [r7, #12]
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	733b      	strb	r3, [r7, #12]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3314      	adds	r3, #20
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d11f      	bne.n	80044c2 <DCD_HandleOutEP_ISR+0xa6>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	3314      	adds	r3, #20
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80044a4:	681b      	ldr	r3, [r3, #0]
            deptsiz.b.xfersize;
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	f3c2 0212 	ubfx	r2, r2, #0, #19
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 80044ac:	1a99      	subs	r1, r3, r2
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4403      	add	r3, r0
 80044bc:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80044c0:	6019      	str	r1, [r3, #0]
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 80044c2:	4b29      	ldr	r3, [pc, #164]	; (8004568 <DCD_HandleOutEP_ISR+0x14c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	4611      	mov	r1, r2
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	78db      	ldrb	r3, [r3, #3]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d10a      	bne.n	80044f0 <DCD_HandleOutEP_ISR+0xd4>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <DCD_HandleOutEP_ISR+0xd4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80044e6:	2b05      	cmp	r3, #5
 80044e8:	d102      	bne.n	80044f0 <DCD_HandleOutEP_ISR+0xd4>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fa80 	bl	80039f0 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80044f0:	7b3b      	ldrb	r3, [r7, #12]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <DCD_HandleOutEP_ISR+0xfc>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	7b3b      	ldrb	r3, [r7, #12]
 8004502:	f043 0302 	orr.w	r3, r3, #2
 8004506:	733b      	strb	r3, [r7, #12]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3314      	adds	r3, #20
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8004518:	7b3b      	ldrb	r3, [r7, #12]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <DCD_HandleOutEP_ISR+0x12e>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8004524:	4b10      	ldr	r3, [pc, #64]	; (8004568 <DCD_HandleOutEP_ISR+0x14c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	7b3b      	ldrb	r3, [r7, #12]
 8004534:	f043 0308 	orr.w	r3, r3, #8
 8004538:	733b      	strb	r3, [r7, #12]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3314      	adds	r3, #20
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3301      	adds	r3, #1
 800454e:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f47f af6c 	bne.w	8004436 <DCD_HandleOutEP_ISR+0x1a>
  }
  return 1;
 800455e:	2301      	movs	r3, #1
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000078 	.word	0x20000078

0800456c <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <DCD_HandleSof_ISR+0x30>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 8004582:	7b3b      	ldrb	r3, [r7, #12]
 8004584:	f043 0308 	orr.w	r3, r3, #8
 8004588:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	615a      	str	r2, [r3, #20]
  
  return 1;
 8004592:	2301      	movs	r3, #1
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000078 	.word	0x20000078

080045a0 <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 80045ac:	7c3b      	ldrb	r3, [r7, #16]
 80045ae:	f043 0310 	orr.w	r3, r3, #16
 80045b2:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	68d2      	ldr	r2, [r2, #12]
 80045bc:	6991      	ldr	r1, [r2, #24]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	43d2      	mvns	r2, r2
 80045c2:	400a      	ands	r2, r1
 80045c4:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80045ce:	7b3b      	ldrb	r3, [r7, #12]
 80045d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 80045ec:	7bbb      	ldrb	r3, [r7, #14]
 80045ee:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d844      	bhi.n	8004684 <DCD_HandleRxStatusQueueLevel_ISR+0xe4>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <DCD_HandleRxStatusQueueLevel_ISR+0x60>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004685 	.word	0x08004685
 8004604:	08004619 	.word	0x08004619
 8004608:	08004685 	.word	0x08004685
 800460c:	08004685 	.word	0x08004685
 8004610:	08004685 	.word	0x08004685
 8004614:	08004661 	.word	0x08004661
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8004618:	89ba      	ldrh	r2, [r7, #12]
 800461a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800461e:	4013      	ands	r3, r2
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d030      	beq.n	8004688 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	68d9      	ldr	r1, [r3, #12]
 800462a:	89bb      	ldrh	r3, [r7, #12]
 800462c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fe f9b2 	bl	800299e <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	89ba      	ldrh	r2, [r7, #12]
 8004640:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8004644:	b292      	uxth	r2, r2
 8004646:	441a      	add	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	89ba      	ldrh	r2, [r7, #12]
 8004652:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8004656:	b292      	uxth	r2, r2
 8004658:	441a      	add	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	619a      	str	r2, [r3, #24]
    }
    break;
 800465e:	e013      	b.n	8004688 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 8004666:	2208      	movs	r2, #8
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fe f997 	bl	800299e <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	89ba      	ldrh	r2, [r7, #12]
 8004676:	f3c2 120a 	ubfx	r2, r2, #4, #11
 800467a:	b292      	uxth	r2, r2
 800467c:	441a      	add	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	619a      	str	r2, [r3, #24]
    break;
 8004682:	e002      	b.n	800468a <DCD_HandleRxStatusQueueLevel_ISR+0xea>
  default:
    break;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <DCD_HandleRxStatusQueueLevel_ISR+0xea>
    break;
 8004688:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68d2      	ldr	r2, [r2, #12]
 8004692:	6991      	ldr	r1, [r2, #24]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]
  
  return 1;
 800469a:	2301      	movs	r3, #1
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	3304      	adds	r3, #4
 80046ca:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d202      	bcs.n	80046e8 <DCD_WriteEmptyTxFifo+0x44>
  {
    len = ep->maxpacket;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3303      	adds	r3, #3
 80046ec:	089b      	lsrs	r3, r3, #2
 80046ee:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8004700:	e02e      	b.n	8004760 <DCD_WriteEmptyTxFifo+0xbc>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	429a      	cmp	r2, r3
 8004716:	d202      	bcs.n	800471e <DCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	3303      	adds	r3, #3
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68d9      	ldr	r1, [r3, #12]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	b29b      	uxth	r3, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fe f8f8 	bl	8002928 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	441a      	add	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	441a      	add	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	3304      	adds	r3, #4
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	60bb      	str	r3, [r7, #8]
  while  (txstatus.b.txfspcavail > len32b &&
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	461a      	mov	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	429a      	cmp	r2, r3
 8004768:	d909      	bls.n	800477e <DCD_WriteEmptyTxFifo+0xda>
          ep->xfer_count < ep->xfer_len &&
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	695b      	ldr	r3, [r3, #20]
  while  (txstatus.b.txfspcavail > len32b &&
 8004772:	429a      	cmp	r2, r3
 8004774:	d203      	bcs.n	800477e <DCD_WriteEmptyTxFifo+0xda>
            ep->xfer_len != 0)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1c1      	bne.n	8004702 <DCD_WriteEmptyTxFifo+0x5e>
  }
  
  return 1;
 800477e:	2301      	movs	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 80047a8:	7c3b      	ldrb	r3, [r7, #16]
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6912      	ldr	r2, [r2, #16]
 80047b8:	6851      	ldr	r1, [r2, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	43d2      	mvns	r2, r2
 80047be:	400a      	ands	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 80047c2:	2100      	movs	r1, #0
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fe faa1 	bl	8002d0c <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
 80047ce:	e012      	b.n	80047f6 <DCD_HandleUsbReset_ISR+0x6e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3304      	adds	r3, #4
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	22ff      	movs	r2, #255	; 0xff
 80047de:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3314      	adds	r3, #20
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	22ff      	movs	r2, #255	; 0xff
 80047ee:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	3301      	adds	r3, #1
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	429a      	cmp	r2, r3
 8004800:	d8e6      	bhi.n	80047d0 <DCD_HandleUsbReset_ISR+0x48>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f04f 32ff 	mov.w	r2, #4294967295
 800480a:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 800480c:	2301      	movs	r3, #1
 800480e:	843b      	strh	r3, [r7, #32]
  daintmsk.ep.out = 1;
 8004810:	2301      	movs	r3, #1
 8004812:	847b      	strh	r3, [r7, #34]	; 0x22
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	6a3a      	ldr	r2, [r7, #32]
 800481a:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 800481c:	7f3b      	ldrb	r3, [r7, #28]
 800481e:	f043 0308 	orr.w	r3, r3, #8
 8004822:	773b      	strb	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 8004824:	7f3b      	ldrb	r3, [r7, #28]
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	773b      	strb	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 800482c:	7f3b      	ldrb	r3, [r7, #28]
 800482e:	f043 0302 	orr.w	r3, r3, #2
 8004832:	773b      	strb	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 800483c:	7e3b      	ldrb	r3, [r7, #24]
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	763b      	strb	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 8004844:	7e3b      	ldrb	r3, [r7, #24]
 8004846:	f043 0308 	orr.w	r3, r3, #8
 800484a:	763b      	strb	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 800484c:	7e3b      	ldrb	r3, [r7, #24]
 800484e:	f043 0302 	orr.w	r3, r3, #2
 8004852:	763b      	strb	r3, [r7, #24]

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 8004864:	8abb      	ldrh	r3, [r7, #20]
 8004866:	f36f 130a 	bfc	r3, #4, #7
 800486a:	82bb      	strh	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff f8bb 	bl	80039f0 <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 800487e:	7b7b      	ldrb	r3, [r7, #13]
 8004880:	f043 0310 	orr.w	r3, r3, #16
 8004884:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <DCD_HandleUsbReset_ISR+0x11c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
  return 1;
 8004898:	2301      	movs	r3, #1
}
 800489a:	4618      	mov	r0, r3
 800489c:	3728      	adds	r7, #40	; 0x28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000078 	.word	0x20000078

080048a8 <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fe fcc0 	bl	8003236 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fe fc95 	bl	80031ee <USB_OTG_GetDeviceSpeed>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d10c      	bne.n	80048e4 <DCD_HandleEnumDone_ISR+0x3c>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d6:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 80048d8:	7a7b      	ldrb	r3, [r7, #9]
 80048da:	2209      	movs	r2, #9
 80048dc:	f362 0385 	bfi	r3, r2, #2, #4
 80048e0:	727b      	strb	r3, [r7, #9]
 80048e2:	e00a      	b.n	80048fa <DCD_HandleEnumDone_ISR+0x52>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2240      	movs	r2, #64	; 0x40
 80048ee:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 80048f0:	7a7b      	ldrb	r3, [r7, #9]
 80048f2:	2205      	movs	r2, #5
 80048f4:	f362 0385 	bfi	r3, r2, #2, #4
 80048f8:	727b      	strb	r3, [r7, #9]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 8004906:	7b7b      	ldrb	r3, [r7, #13]
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	615a      	str	r2, [r3, #20]
  return 1;
 8004916:	2301      	movs	r3, #1
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 800492c:	4b08      	ldr	r3, [pc, #32]	; (8004950 <DCD_IsoINIncomplete_ISR+0x30>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 8004936:	7bbb      	ldrb	r3, [r7, #14]
 8004938:	f043 0310 	orr.w	r3, r3, #16
 800493c:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	615a      	str	r2, [r3, #20]
  
  return 1;
 8004946:	2301      	movs	r3, #1
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000078 	.word	0x20000078

08004954 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <DCD_IsoOUTIncomplete_ISR+0x30>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 800496a:	7bbb      	ldrb	r3, [r7, #14]
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	615a      	str	r2, [r3, #20]
  return 1;
 800497a:	2301      	movs	r3, #1
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000078 	.word	0x20000078

08004988 <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	01db      	lsls	r3, r3, #7
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4013      	ands	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  return v;
 80049ca:	68fb      	ldr	r3, [r7, #12]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <FAT16_GetStorageSize>:
    "ABCDEFGhhhh 1234566789\n",
};


uint32_t FAT16_GetStorageSize(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return STORAGE_SIZE;
 80049dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <FAT16_Init>:

static uint8_t g_arrData[1024];


void FAT16_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
  char*  strHeader = "From;To;Length;Azimuth;Inclination\n";
 80049f2:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <FAT16_Init+0x74>)
 80049f4:	60bb      	str	r3, [r7, #8]
  memset (g_arrData, ' ', sizeof (g_arrData));
 80049f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049fa:	2120      	movs	r1, #32
 80049fc:	4819      	ldr	r0, [pc, #100]	; (8004a64 <FAT16_Init+0x78>)
 80049fe:	f000 fd3a 	bl	8005476 <memset>
  memcpy (g_arrData, strHeader, strlen (strHeader));
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7fb fbe0 	bl	80001c8 <strlen>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4815      	ldr	r0, [pc, #84]	; (8004a64 <FAT16_Init+0x78>)
 8004a10:	f000 fd26 	bl	8005460 <memcpy>

  g_nFilesCount = 0;
 8004a14:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <FAT16_Init+0x7c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	801a      	strh	r2, [r3, #0]
  uint32_t   nTemplSize = sizeof(g_arrFatFilesTempl) / sizeof(Fat16DirEntry);
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < nTemplSize; ++i)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	e014      	b.n	8004a4e <FAT16_Init+0x62>
  {
    memcpy (&g_arrFatFiles[i], &g_arrFatFilesTempl[i], sizeof(Fat16DirEntry));
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	015b      	lsls	r3, r3, #5
 8004a28:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <FAT16_Init+0x80>)
 8004a2a:	1898      	adds	r0, r3, r2
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	015b      	lsls	r3, r3, #5
 8004a30:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <FAT16_Init+0x84>)
 8004a32:	4413      	add	r3, r2
 8004a34:	2220      	movs	r2, #32
 8004a36:	4619      	mov	r1, r3
 8004a38:	f000 fd12 	bl	8005460 <memcpy>
    g_nFilesCount++;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <FAT16_Init+0x7c>)
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <FAT16_Init+0x7c>)
 8004a46:	801a      	strh	r2, [r3, #0]
  for (uint8_t i = 0; i < nTemplSize; ++i)
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	7bfa      	ldrb	r2, [r7, #15]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d3e6      	bcc.n	8004a24 <FAT16_Init+0x38>
  }

  // vyplnit tabulku start/end block podle delky soubor

}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08005488 	.word	0x08005488
 8004a64:	20000120 	.word	0x20000120
 8004a68:	2000011e 	.word	0x2000011e
 8004a6c:	10000000 	.word	0x10000000
 8004a70:	08005748 	.word	0x08005748

08004a74 <FAT16_CreateBlockFAT>:


void FAT16_CreateBlockFAT(uint8_t *buf, uint16_t nBlockOffset)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	807b      	strh	r3, [r7, #2]
  static uint16_t nLastFile = 0;
  uint16_t nSectorIndex = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	81fb      	strh	r3, [r7, #14]

  memset(buf, 0, FAT16_BLOCK_SIZE);
 8004a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fcf3 	bl	8005476 <memset>
  if (nBlockOffset == 0)
 8004a90:	887b      	ldrh	r3, [r7, #2]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <FAT16_CreateBlockFAT+0x34>
  {
    memcpy(buf, g_FATSect0, sizeof(g_FATSect0));
 8004a96:	4b33      	ldr	r3, [pc, #204]	; (8004b64 <FAT16_CreateBlockFAT+0xf0>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
    nSectorIndex = 2;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	81fb      	strh	r3, [r7, #14]
    nLastFile = 0;
 8004aa2:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <FAT16_CreateBlockFAT+0xf4>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	801a      	strh	r2, [r3, #0]
  }

  for (uint8_t i = nLastFile; i < g_nFilesCount; ++i, nLastFile++)
 8004aa8:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <FAT16_CreateBlockFAT+0xf4>)
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	737b      	strb	r3, [r7, #13]
 8004aae:	e04e      	b.n	8004b4e <FAT16_CreateBlockFAT+0xda>
  {
    if (g_arrFatFiles[i].file_size == 0)
 8004ab0:	7b7b      	ldrb	r3, [r7, #13]
 8004ab2:	4a2e      	ldr	r2, [pc, #184]	; (8004b6c <FAT16_CreateBlockFAT+0xf8>)
 8004ab4:	015b      	lsls	r3, r3, #5
 8004ab6:	4413      	add	r3, r2
 8004ab8:	331c      	adds	r3, #28
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d03c      	beq.n	8004b3a <FAT16_CreateBlockFAT+0xc6>
    {
      continue;
    }

    for (uint8_t nFatEntry = g_arrFatFiles[i].starting_cluster; nFatEntry <= g_arrFatFiles[i].ending_cluster; ++nFatEntry)
 8004ac0:	7b7b      	ldrb	r3, [r7, #13]
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <FAT16_CreateBlockFAT+0xf8>)
 8004ac4:	015b      	lsls	r3, r3, #5
 8004ac6:	4413      	add	r3, r2
 8004ac8:	331a      	adds	r3, #26
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	733b      	strb	r3, [r7, #12]
 8004ace:	e029      	b.n	8004b24 <FAT16_CreateBlockFAT+0xb0>
    {
      if (nSectorIndex / FAT16_BLOCK_SIZE / FAT16_FAT_ITEM_SIZE == nBlockOffset)
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	0a9b      	lsrs	r3, r3, #10
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d120      	bne.n	8004b1e <FAT16_CreateBlockFAT+0xaa>
      {
        uint16_t* pBuffer = (uint16_t*)buf + nSectorIndex;
 8004adc:	89fb      	ldrh	r3, [r7, #14]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]
        if (nFatEntry == g_arrFatFiles[i].ending_cluster)
 8004ae6:	7b3b      	ldrb	r3, [r7, #12]
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	7b7b      	ldrb	r3, [r7, #13]
 8004aec:	491f      	ldr	r1, [pc, #124]	; (8004b6c <FAT16_CreateBlockFAT+0xf8>)
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	440b      	add	r3, r1
 8004af2:	3314      	adds	r3, #20
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d104      	bne.n	8004b04 <FAT16_CreateBlockFAT+0x90>
        {
          *pBuffer = 0xFFFF;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	e005      	b.n	8004b10 <FAT16_CreateBlockFAT+0x9c>
        }
        else
        {
          *pBuffer = nFatEntry + 1;
 8004b04:	7b3b      	ldrb	r3, [r7, #12]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	801a      	strh	r2, [r3, #0]
        }

        nSectorIndex++;
 8004b10:	89fb      	ldrh	r3, [r7, #14]
 8004b12:	3301      	adds	r3, #1
 8004b14:	81fb      	strh	r3, [r7, #14]
        if (nSectorIndex == FAT16_BLOCK_SIZE / FAT16_FAT_ITEM_SIZE)
 8004b16:	89fb      	ldrh	r3, [r7, #14]
 8004b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1c:	d01e      	beq.n	8004b5c <FAT16_CreateBlockFAT+0xe8>
    for (uint8_t nFatEntry = g_arrFatFiles[i].starting_cluster; nFatEntry <= g_arrFatFiles[i].ending_cluster; ++nFatEntry)
 8004b1e:	7b3b      	ldrb	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	733b      	strb	r3, [r7, #12]
 8004b24:	7b3b      	ldrb	r3, [r7, #12]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	7b7b      	ldrb	r3, [r7, #13]
 8004b2a:	4910      	ldr	r1, [pc, #64]	; (8004b6c <FAT16_CreateBlockFAT+0xf8>)
 8004b2c:	015b      	lsls	r3, r3, #5
 8004b2e:	440b      	add	r3, r1
 8004b30:	3314      	adds	r3, #20
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d9cb      	bls.n	8004ad0 <FAT16_CreateBlockFAT+0x5c>
 8004b38:	e000      	b.n	8004b3c <FAT16_CreateBlockFAT+0xc8>
      continue;
 8004b3a:	bf00      	nop
  for (uint8_t i = nLastFile; i < g_nFilesCount; ++i, nLastFile++)
 8004b3c:	7b7b      	ldrb	r3, [r7, #13]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	737b      	strb	r3, [r7, #13]
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <FAT16_CreateBlockFAT+0xf4>)
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <FAT16_CreateBlockFAT+0xf4>)
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	7b7b      	ldrb	r3, [r7, #13]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <FAT16_CreateBlockFAT+0xfc>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d3aa      	bcc.n	8004ab0 <FAT16_CreateBlockFAT+0x3c>
 8004b5a:	e000      	b.n	8004b5e <FAT16_CreateBlockFAT+0xea>
        {
          return;
 8004b5c:	bf00      	nop
        }
      }
    }
  }
}
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	08005744 	.word	0x08005744
 8004b68:	20000520 	.word	0x20000520
 8004b6c:	10000000 	.word	0x10000000
 8004b70:	2000011e 	.word	0x2000011e

08004b74 <FAT16_CreateBlockDIR>:

void FAT16_CreateBlockDIR(uint8_t *buf, uint16_t nBlockOffset)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	807b      	strh	r3, [r7, #2]
  memset(buf, 0, FAT16_BLOCK_SIZE);
 8004b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b84:	2100      	movs	r1, #0
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fc75 	bl	8005476 <memset>
  uint16_t  nDirEntryIndex = FAT16_BLOCK_SIZE * nBlockOffset / FAT16_DIR_ENTRY_SIZE;
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	025b      	lsls	r3, r3, #9
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da00      	bge.n	8004b96 <FAT16_CreateBlockDIR+0x22>
 8004b94:	331f      	adds	r3, #31
 8004b96:	115b      	asrs	r3, r3, #5
 8004b98:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; g_nFilesCount > nDirEntryIndex && i < FAT16_DIR_ENTRIES_IN_BLOCK; ++nDirEntryIndex, ++i)
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	737b      	strb	r3, [r7, #13]
 8004b9e:	e012      	b.n	8004bc6 <FAT16_CreateBlockDIR+0x52>
  {
    memcpy(buf + i * FAT16_DIR_ENTRY_SIZE, &g_arrFatFiles[nDirEntryIndex], sizeof(Fat16DirEntry));
 8004ba0:	7b7b      	ldrb	r3, [r7, #13]
 8004ba2:	015b      	lsls	r3, r3, #5
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	1898      	adds	r0, r3, r2
 8004baa:	89fb      	ldrh	r3, [r7, #14]
 8004bac:	015b      	lsls	r3, r3, #5
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <FAT16_CreateBlockDIR+0x6c>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f000 fc53 	bl	8005460 <memcpy>
  for (uint8_t i = 0; g_nFilesCount > nDirEntryIndex && i < FAT16_DIR_ENTRIES_IN_BLOCK; ++nDirEntryIndex, ++i)
 8004bba:	89fb      	ldrh	r3, [r7, #14]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	81fb      	strh	r3, [r7, #14]
 8004bc0:	7b7b      	ldrb	r3, [r7, #13]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	737b      	strb	r3, [r7, #13]
 8004bc6:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <FAT16_CreateBlockDIR+0x70>)
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	89fa      	ldrh	r2, [r7, #14]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d202      	bcs.n	8004bd6 <FAT16_CreateBlockDIR+0x62>
 8004bd0:	7b7b      	ldrb	r3, [r7, #13]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	d9e4      	bls.n	8004ba0 <FAT16_CreateBlockDIR+0x2c>
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	10000000 	.word	0x10000000
 8004be4:	2000011e 	.word	0x2000011e

08004be8 <FAT16_CreateBlockDATA>:

void FAT16_CreateBlockDATA(uint8_t *buf, uint16_t nBlockOffset)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
  memcpy(buf, g_arrData, FAT16_BLOCK_SIZE);
 8004bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf8:	4903      	ldr	r1, [pc, #12]	; (8004c08 <FAT16_CreateBlockDATA+0x20>)
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fc30 	bl	8005460 <memcpy>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20000120 	.word	0x20000120

08004c0c <FAT16_CreateBlock>:

// ------------------------------------------------------------------------------------------
void FAT16_CreateBlock(uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  uint32_t nBufPos = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
  while (blk_len--)
 8004c1e:	e042      	b.n	8004ca6 <FAT16_CreateBlock+0x9a>
  {
    if (blk_addr == FAT16_BOOT_BLOK)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <FAT16_CreateBlock+0x2e>
    {
      memcpy(buf, &g_BootRecordFAT16struct, sizeof(g_BootRecordFAT16struct));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a23      	ldr	r2, [pc, #140]	; (8004cb8 <FAT16_CreateBlock+0xac>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fc14 	bl	8005460 <memcpy>
 8004c38:	e02e      	b.n	8004c98 <FAT16_CreateBlock+0x8c>
    }
    else if (blk_addr >= FAT16_FAT_BLOCK && blk_addr < FAT16_DIR_BLOCK)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00e      	beq.n	8004c5e <FAT16_CreateBlock+0x52>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d80b      	bhi.n	8004c5e <FAT16_CreateBlock+0x52>
    {
      FAT16_CreateBlockFAT(buf + nBufPos, blk_addr - FAT16_FAT_BLOCK);
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7ff ff0c 	bl	8004a74 <FAT16_CreateBlockFAT>
 8004c5c:	e01c      	b.n	8004c98 <FAT16_CreateBlock+0x8c>
    }
    else if (blk_addr >= FAT16_DIR_BLOCK && blk_addr < FAT16_DATA_BLOCK)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d90e      	bls.n	8004c82 <FAT16_CreateBlock+0x76>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b0a      	cmp	r3, #10
 8004c68:	d80b      	bhi.n	8004c82 <FAT16_CreateBlock+0x76>
    {
      FAT16_CreateBlockDIR(buf + nBufPos, blk_addr - FAT16_DIR_BLOCK);
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	441a      	add	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b03      	subs	r3, #3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7ff ff7a 	bl	8004b74 <FAT16_CreateBlockDIR>
 8004c80:	e00a      	b.n	8004c98 <FAT16_CreateBlock+0x8c>
    }
    else
    {
      FAT16_CreateBlockDATA(buf + nBufPos, blk_addr - FAT16_DATA_BLOCK);
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	441a      	add	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b0b      	subs	r3, #11
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f7ff ffa8 	bl	8004be8 <FAT16_CreateBlockDATA>
    }

    nBufPos += FAT16_BLOCK_SIZE;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004c9e:	617b      	str	r3, [r7, #20]
    blk_addr++;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60bb      	str	r3, [r7, #8]
  while (blk_len--)
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	1e5a      	subs	r2, r3, #1
 8004caa:	80fa      	strh	r2, [r7, #6]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1b7      	bne.n	8004c20 <FAT16_CreateBlock+0x14>
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	08005544 	.word	0x08005544

08004cbc <main>:
/**
 * @brief Main function
 * @return None
 */
int main(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af02      	add	r7, sp, #8

  FAT16_Init();
 8004cc2:	f7ff fe93 	bl	80049ec <FAT16_Init>

  // Initialize USB device stack
  USBD_Init(&USB_OTG_dev,
 8004cc6:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <main+0x1c>)
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <main+0x20>)
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <main+0x24>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4804      	ldr	r0, [pc, #16]	; (8004ce4 <main+0x28>)
 8004cd2:	f7fc fe55 	bl	8001980 <USBD_Init>
            USB_OTG_FS_CORE_ID,
            &USR_desc,
            &USBD_MSC_cb,
            &USR_cb);

  while (1)
 8004cd6:	e7fe      	b.n	8004cd6 <main+0x1a>
 8004cd8:	200000d4 	.word	0x200000d4
 8004cdc:	20000020 	.word	0x20000020
 8004ce0:	2000007c 	.word	0x2000007c
 8004ce4:	200015dc 	.word	0x200015dc

08004ce8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004cfa:	e7fe      	b.n	8004cfa <HardFault_Handler+0x4>

08004cfc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004d00:	e7fe      	b.n	8004d00 <MemManage_Handler+0x4>

08004d02 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004d06:	e7fe      	b.n	8004d06 <BusFault_Handler+0x4>

08004d08 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004d0c:	e7fe      	b.n	8004d0c <UsageFault_Handler+0x4>

08004d0e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
}
 8004d12:	bf00      	nop
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	af00      	add	r7, sp, #0
}
 8004d2e:	bf00      	nop
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d3c:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <SystemInit+0x50>)
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <SystemInit+0x50>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <SystemInit+0x50>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d4e:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <SystemInit+0x50>)
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <SystemInit+0x50>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <SystemInit+0x50>)
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <SystemInit+0x54>)
 8004d62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <SystemInit+0x50>)
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <SystemInit+0x50>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <SystemInit+0x50>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004d76:	f000 f80d 	bl	8004d94 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <SystemInit+0x58>)
 8004d7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d80:	609a      	str	r2, [r3, #8]
#endif
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	24003010 	.word	0x24003010
 8004d90:	e000ed00 	.word	0xe000ed00

08004d94 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004da2:	4a41      	ldr	r2, [pc, #260]	; (8004ea8 <SetSysClock+0x114>)
 8004da4:	4b40      	ldr	r3, [pc, #256]	; (8004ea8 <SetSysClock+0x114>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004dae:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <SetSysClock+0x114>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <SetSysClock+0x38>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004dca:	d1f0      	bne.n	8004dae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004dcc:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <SetSysClock+0x114>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	e001      	b.n	8004de2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004dde:	2300      	movs	r3, #0
 8004de0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d142      	bne.n	8004e6e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004de8:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <SetSysClock+0x114>)
 8004dea:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <SetSysClock+0x114>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004df4:	4a2d      	ldr	r2, [pc, #180]	; (8004eac <SetSysClock+0x118>)
 8004df6:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <SetSysClock+0x118>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dfe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004e00:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <SetSysClock+0x114>)
 8004e02:	4b29      	ldr	r3, [pc, #164]	; (8004ea8 <SetSysClock+0x114>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004e08:	4a27      	ldr	r2, [pc, #156]	; (8004ea8 <SetSysClock+0x114>)
 8004e0a:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <SetSysClock+0x114>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <SetSysClock+0x114>)
 8004e16:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <SetSysClock+0x114>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004e1e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004e20:	4b21      	ldr	r3, [pc, #132]	; (8004ea8 <SetSysClock+0x114>)
 8004e22:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <SetSysClock+0x11c>)
 8004e24:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004e26:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <SetSysClock+0x114>)
 8004e28:	4b1f      	ldr	r3, [pc, #124]	; (8004ea8 <SetSysClock+0x114>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004e32:	bf00      	nop
 8004e34:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <SetSysClock+0x114>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f9      	beq.n	8004e34 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004e40:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <SetSysClock+0x120>)
 8004e42:	f240 6205 	movw	r2, #1541	; 0x605
 8004e46:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004e48:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <SetSysClock+0x114>)
 8004e4a:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <SetSysClock+0x114>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004e54:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <SetSysClock+0x114>)
 8004e56:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <SetSysClock+0x114>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f043 0302 	orr.w	r3, r3, #2
 8004e5e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8004e60:	bf00      	nop
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <SetSysClock+0x114>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d1f9      	bne.n	8004e62 <SetSysClock+0xce>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <SetSysClock+0x114>)
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <SetSysClock+0x114>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e78:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <SetSysClock+0x114>)
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <SetSysClock+0x124>)
 8004e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <SetSysClock+0x114>)
 8004e84:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <SetSysClock+0x114>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e8c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8004e8e:	bf00      	nop
 8004e90:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <SetSysClock+0x114>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f9      	beq.n	8004e90 <SetSysClock+0xfc>
  {
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	07405408 	.word	0x07405408
 8004eb4:	40023c00 	.word	0x40023c00
 8004eb8:	50003000 	.word	0x50003000

08004ebc <USB_OTG_BSP_Init>:
* @brief  USB_OTG_BSP_Init
*         Initilizes BSP configurations
* @param  None
* @retval None
*/
void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;    
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure; 

  // enable USB pins clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f7fb fba6 	bl	8000618 <RCC_AHB1PeriphClockCmd>
  
  // PA8 - SOF
  // PA11 - DM
  // PA12 - DP
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8  | 
 8004ecc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004ed0:	61bb      	str	r3, [r7, #24]
                                GPIO_Pin_11 | 
                                GPIO_Pin_12;
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004eda:	2300      	movs	r3, #0
 8004edc:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8004ee2:	f107 0318 	add.w	r3, r7, #24
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	483f      	ldr	r0, [pc, #252]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004eea:	f7fb fa6d 	bl	80003c8 <GPIO_Init>
  
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 8004eee:	220a      	movs	r2, #10
 8004ef0:	2108      	movs	r1, #8
 8004ef2:	483d      	ldr	r0, [pc, #244]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004ef4:	f7fb faf6 	bl	80004e4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ; 
 8004ef8:	220a      	movs	r2, #10
 8004efa:	210b      	movs	r1, #11
 8004efc:	483a      	ldr	r0, [pc, #232]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004efe:	f7fb faf1 	bl	80004e4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 8004f02:	220a      	movs	r2, #10
 8004f04:	210c      	movs	r1, #12
 8004f06:	4838      	ldr	r0, [pc, #224]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004f08:	f7fb faec 	bl	80004e4 <GPIO_PinAFConfig>
  
  /* Configure VBUS Pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8004f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8004f12:	2303      	movs	r3, #3
 8004f14:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004f16:	2300      	movs	r3, #0
 8004f18:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8004f22:	f107 0318 	add.w	r3, r7, #24
 8004f26:	4619      	mov	r1, r3
 8004f28:	482f      	ldr	r0, [pc, #188]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004f2a:	f7fb fa4d 	bl	80003c8 <GPIO_Init>
  
  /* Configure ID pin */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8004f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8004f34:	2301      	movs	r3, #1
 8004f36:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	777b      	strb	r3, [r7, #29]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8004f40:	f107 0318 	add.w	r3, r7, #24
 8004f44:	4619      	mov	r1, r3
 8004f46:	4828      	ldr	r0, [pc, #160]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004f48:	f7fb fa3e 	bl	80003c8 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;   
 8004f4c:	220a      	movs	r2, #10
 8004f4e:	210a      	movs	r1, #10
 8004f50:	4825      	ldr	r0, [pc, #148]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004f52:	f7fb fac7 	bl	80004e4 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004f56:	2101      	movs	r1, #1
 8004f58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f5c:	f7fb fb9c 	bl	8000698 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ; 
 8004f60:	2101      	movs	r1, #1
 8004f62:	2080      	movs	r0, #128	; 0x80
 8004f64:	f7fb fb78 	bl	8000658 <RCC_AHB2PeriphClockCmd>

  /* enable the PWR clock */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);   
 8004f68:	2101      	movs	r1, #1
 8004f6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004f6e:	f7fb fbb3 	bl	80006d8 <RCC_APB1PeriphResetCmd>
  

  // Enable pushbutton PA0 for wakeup
  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004f72:	2101      	movs	r1, #1
 8004f74:	2001      	movs	r0, #1
 8004f76:	f7fb fb4f 	bl	8000618 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f80:	f7fb fb8a 	bl	8000698 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004f84:	2300      	movs	r3, #0
 8004f86:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	61bb      	str	r3, [r7, #24]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	4619      	mov	r1, r3
 8004f96:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <USB_OTG_BSP_Init+0x12c>)
 8004f98:	f7fb fa16 	bl	80003c8 <GPIO_Init>

  /* Connect Button EXTI Line to Button GPIO Pin */
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f7fb fbf4 	bl	800078c <SYSCFG_EXTILineConfig>

  /* Configure Button EXTI line */
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	753b      	strb	r3, [r7, #20]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004fac:	2308      	movs	r3, #8
 8004fae:	757b      	strb	r3, [r7, #21]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75bb      	strb	r3, [r7, #22]
  EXTI_Init(&EXTI_InitStructure);
 8004fb4:	f107 0310 	add.w	r3, r7, #16
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fb f983 	bl	80002c4 <EXTI_Init>

  /* Enable and set Button EXTI Interrupt to the lowest priority */
  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8004fbe:	2306      	movs	r3, #6
 8004fc0:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004fc2:	230f      	movs	r3, #15
 8004fc4:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8004fc6:	230f      	movs	r3, #15
 8004fc8:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]

  NVIC_Init(&NVIC_InitStructure);
 8004fce:	f107 030c 	add.w	r3, r7, #12
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fb f914 	bl	8000200 <NVIC_Init>

  EXTI_ClearITPendingBit(EXTI_Line0);
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f7fb f9e5 	bl	80003a8 <EXTI_ClearITPendingBit>
  NVIC_Init(&NVIC_InitStructure);

  EXTI_ClearITPendingBit(EXTI_Line18);    
#endif 
  
}
 8004fde:	bf00      	nop
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40020000 	.word	0x40020000

08004fec <USB_OTG_BSP_EnableInterrupt>:
* @brief  USB_OTG_BSP_EnableInterrupt
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8004ff4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8004ff8:	f7fb f8ee 	bl	80001d8 <NVIC_PriorityGroupConfig>
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
 8004ffc:	2343      	movs	r3, #67	; 0x43
 8004ffe:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8005000:	2301      	movs	r3, #1
 8005002:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8005004:	2303      	movs	r3, #3
 8005006:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);  
 800500c:	f107 030c 	add.w	r3, r7, #12
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb f8f5 	bl	8000200 <NVIC_Init>
  
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <USB_OTG_BSP_uDelay>:
* @brief  USB_OTG_BSP_uDelay
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec) {
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
  const uint32_t utime = (120 * usec / 7);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	461a      	mov	r2, r3
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <USB_OTG_BSP_uDelay+0x44>)
 800503a:	fba3 1302 	umull	r1, r3, r3, r2
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	0852      	lsrs	r2, r2, #1
 8005042:	4413      	add	r3, r2
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	60bb      	str	r3, [r7, #8]
  do
  {
    if ( ++count > utime )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d800      	bhi.n	8005058 <USB_OTG_BSP_uDelay+0x38>
 8005056:	e7f7      	b.n	8005048 <USB_OTG_BSP_uDelay+0x28>
    {
      return ;
 8005058:	bf00      	nop
    }
  }
  while (1);
}
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	24924925 	.word	0x24924925

08005068 <USB_OTG_BSP_mDelay>:
* @brief  USB_OTG_BSP_mDelay
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USB_OTG_BSP_uDelay(msec * 1000);   
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ffd0 	bl	8005020 <USB_OTG_BSP_uDelay>
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <OTG_FS_WKUP_IRQHandler>:
/**
* @brief  This function handles EXTI18_IRQ Handler.
* @param  None
* @retval None
*/
void OTG_FS_WKUP_IRQHandler(void) {
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0

  if(USB_OTG_dev.cfg.low_power) {
 800508c:	4b17      	ldr	r3, [pc, #92]	; (80050ec <OTG_FS_WKUP_IRQHandler+0x64>)
 800508e:	7a9b      	ldrb	r3, [r3, #10]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d025      	beq.n	80050e0 <OTG_FS_WKUP_IRQHandler+0x58>
    /* Reset SLEEPDEEP and SLEEPONEXIT bits */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005094:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <OTG_FS_WKUP_IRQHandler+0x68>)
 8005096:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <OTG_FS_WKUP_IRQHandler+0x68>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f023 0306 	bic.w	r3, r3, #6
 800509e:	6113      	str	r3, [r2, #16]

    /* After wake-up from sleep mode, reconfigure the system clock */
    RCC_HSEConfig(RCC_HSE_ON);
 80050a0:	2001      	movs	r0, #1
 80050a2:	f7fb fa69 	bl	8000578 <RCC_HSEConfig>

    /* Wait till HSE is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
 80050a6:	bf00      	nop
 80050a8:	2031      	movs	r0, #49	; 0x31
 80050aa:	f7fb fb35 	bl	8000718 <RCC_GetFlagStatus>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f9      	beq.n	80050a8 <OTG_FS_WKUP_IRQHandler+0x20>

    /* Enable PLL */
    RCC_PLLCmd(ENABLE);
 80050b4:	2001      	movs	r0, #1
 80050b6:	f7fb fa73 	bl	80005a0 <RCC_PLLCmd>

    /* Wait till PLL is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 80050ba:	bf00      	nop
 80050bc:	2039      	movs	r0, #57	; 0x39
 80050be:	f7fb fb2b 	bl	8000718 <RCC_GetFlagStatus>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f9      	beq.n	80050bc <OTG_FS_WKUP_IRQHandler+0x34>

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80050c8:	2002      	movs	r0, #2
 80050ca:	f7fb fa79 	bl	80005c0 <RCC_SYSCLKConfig>

    /* Wait till PLL is used as system clock source */
    while (RCC_GetSYSCLKSource() != 0x08);
 80050ce:	bf00      	nop
 80050d0:	f7fb fa92 	bl	80005f8 <RCC_GetSYSCLKSource>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d1fa      	bne.n	80050d0 <OTG_FS_WKUP_IRQHandler+0x48>

    USB_OTG_UngateClock(&USB_OTG_dev);
 80050da:	4804      	ldr	r0, [pc, #16]	; (80050ec <OTG_FS_WKUP_IRQHandler+0x64>)
 80050dc:	f7fe fcc1 	bl	8003a62 <USB_OTG_UngateClock>
  }

  EXTI_ClearITPendingBit(EXTI_Line18);
 80050e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80050e4:	f7fb f960 	bl	80003a8 <EXTI_ClearITPendingBit>
}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200015dc 	.word	0x200015dc
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <OTG_FS_IRQHandler>:
* @brief  This function handles OTG_HS Handler.
* @param  None
* @retval None
*/
void OTG_FS_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <OTG_FS_IRQHandler+0x10>)
 80050fa:	f7fe ff23 	bl	8003f44 <USBD_OTG_ISR_Handler>
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200015dc 	.word	0x200015dc

08005108 <EXTI0_IRQHandler>:
/**
* @brief  This function handles EXTI0_IRQ Handler.
* @param  None
* @retval None
*/
void EXTI0_IRQHandler(void) {
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
////    }
//    /* Clear the EXTI line pending bit */
//    EXTI_ClearITPendingBit(EXTI_Line0);
//
//  }
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	6039      	str	r1, [r7, #0]
 8005122:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2212      	movs	r2, #18
 8005128:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800512a:	4b03      	ldr	r3, [pc, #12]	; (8005138 <USBD_USR_DeviceDescriptor+0x20>)
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	20000098 	.word	0x20000098

0800513c <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800514e:	4b03      	ldr	r3, [pc, #12]	; (800515c <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	200000ac 	.word	0x200000ac

08005160 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	6039      	str	r1, [r7, #0]
 800516a:	71fb      	strb	r3, [r7, #7]
 
  
  if(speed == 0)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <USBD_USR_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString ((uint8_t*)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <USBD_USR_ProductStrDescriptor+0x34>)
 8005176:	4808      	ldr	r0, [pc, #32]	; (8005198 <USBD_USR_ProductStrDescriptor+0x38>)
 8005178:	f7fd fb11 	bl	800279e <USBD_GetString>
 800517c:	e004      	b.n	8005188 <USBD_USR_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <USBD_USR_ProductStrDescriptor+0x34>)
 8005182:	4806      	ldr	r0, [pc, #24]	; (800519c <USBD_USR_ProductStrDescriptor+0x3c>)
 8005184:	f7fd fb0b 	bl	800279e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <USBD_USR_ProductStrDescriptor+0x34>)
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2000159c 	.word	0x2000159c
 8005198:	080054ac 	.word	0x080054ac
 800519c:	080054c4 	.word	0x080054c4

080051a0 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	71fb      	strb	r3, [r7, #7]
  USBD_GetString ((uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	4904      	ldr	r1, [pc, #16]	; (80051c0 <USBD_USR_ManufacturerStrDescriptor+0x20>)
 80051b0:	4804      	ldr	r0, [pc, #16]	; (80051c4 <USBD_USR_ManufacturerStrDescriptor+0x24>)
 80051b2:	f7fd faf4 	bl	800279e <USBD_GetString>
  return USBD_StrDesc;
 80051b6:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <USBD_USR_ManufacturerStrDescriptor+0x20>)
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	2000159c 	.word	0x2000159c
 80051c4:	080054dc 	.word	0x080054dc

080051c8 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	6039      	str	r1, [r7, #0]
 80051d2:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <USBD_USR_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	4907      	ldr	r1, [pc, #28]	; (80051fc <USBD_USR_SerialStrDescriptor+0x34>)
 80051de:	4808      	ldr	r0, [pc, #32]	; (8005200 <USBD_USR_SerialStrDescriptor+0x38>)
 80051e0:	f7fd fadd 	bl	800279e <USBD_GetString>
 80051e4:	e004      	b.n	80051f0 <USBD_USR_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	4904      	ldr	r1, [pc, #16]	; (80051fc <USBD_USR_SerialStrDescriptor+0x34>)
 80051ea:	4806      	ldr	r0, [pc, #24]	; (8005204 <USBD_USR_SerialStrDescriptor+0x3c>)
 80051ec:	f7fd fad7 	bl	800279e <USBD_GetString>
  }
  return USBD_StrDesc;
 80051f0:	4b02      	ldr	r3, [pc, #8]	; (80051fc <USBD_USR_SerialStrDescriptor+0x34>)
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	2000159c 	.word	0x2000159c
 8005200:	080054f0 	.word	0x080054f0
 8005204:	08005500 	.word	0x08005500

08005208 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	6039      	str	r1, [r7, #0]
 8005212:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d105      	bne.n	8005226 <USBD_USR_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	4907      	ldr	r1, [pc, #28]	; (800523c <USBD_USR_ConfigStrDescriptor+0x34>)
 800521e:	4808      	ldr	r0, [pc, #32]	; (8005240 <USBD_USR_ConfigStrDescriptor+0x38>)
 8005220:	f7fd fabd 	bl	800279e <USBD_GetString>
 8005224:	e004      	b.n	8005230 <USBD_USR_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4904      	ldr	r1, [pc, #16]	; (800523c <USBD_USR_ConfigStrDescriptor+0x34>)
 800522a:	4805      	ldr	r0, [pc, #20]	; (8005240 <USBD_USR_ConfigStrDescriptor+0x38>)
 800522c:	f7fd fab7 	bl	800279e <USBD_GetString>
  }
  return USBD_StrDesc;  
 8005230:	4b02      	ldr	r3, [pc, #8]	; (800523c <USBD_USR_ConfigStrDescriptor+0x34>)
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	2000159c 	.word	0x2000159c
 8005240:	08005510 	.word	0x08005510

08005244 <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	6039      	str	r1, [r7, #0]
 800524e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d105      	bne.n	8005262 <USBD_USR_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4907      	ldr	r1, [pc, #28]	; (8005278 <USBD_USR_InterfaceStrDescriptor+0x34>)
 800525a:	4808      	ldr	r0, [pc, #32]	; (800527c <USBD_USR_InterfaceStrDescriptor+0x38>)
 800525c:	f7fd fa9f 	bl	800279e <USBD_GetString>
 8005260:	e004      	b.n	800526c <USBD_USR_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	4904      	ldr	r1, [pc, #16]	; (8005278 <USBD_USR_InterfaceStrDescriptor+0x34>)
 8005266:	4805      	ldr	r0, [pc, #20]	; (800527c <USBD_USR_InterfaceStrDescriptor+0x38>)
 8005268:	f7fd fa99 	bl	800279e <USBD_GetString>
  }
  return USBD_StrDesc;  
 800526c:	4b02      	ldr	r3, [pc, #8]	; (8005278 <USBD_USR_InterfaceStrDescriptor+0x34>)
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	2000159c 	.word	0x2000159c
 800527c:	0800551c 	.word	0x0800551c

08005280 <STORAGE_Init>:
  * @brief  Initialize the storage medium
  * @param  lun : logical unit number
  * @retval Status
  */
int8_t STORAGE_Init (uint8_t lun)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]

  return (0);
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <STORAGE_GetCapacity>:
  * @param  block_num :  number of physical block
  * @param  block_size : size of a physical block
  * @retval Status
  */
int8_t STORAGE_GetCapacity (uint8_t lun, uint32_t *block_num, uint32_t *block_size)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	73fb      	strb	r3, [r7, #15]
  *block_size =  512;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ac:	601a      	str	r2, [r3, #0]
  *block_num = (uint32_t)(FAT16_GetStorageSize() / 512);
 80052ae:	f7ff fb93 	bl	80049d8 <FAT16_GetStorageSize>
 80052b2:	4603      	mov	r3, r0
 80052b4:	0a5a      	lsrs	r2, r3, #9
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	601a      	str	r2, [r3, #0]

  return (0);
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <STORAGE_IsReady>:
  * @brief  check whether the medium is ready
  * @param  lun : logical unit number
  * @retval Status
  */
int8_t  STORAGE_IsReady (uint8_t lun)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
  return (0);
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <STORAGE_IsWriteProtected>:
  * @brief  check whether the medium is write-protected
  * @param  lun : logical unit number
  * @retval Status
  */
int8_t  STORAGE_IsWriteProtected (uint8_t lun)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
  return 1;
 80052e6:	2301      	movs	r3, #1
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <STORAGE_Read>:
  * @param  blk_addr :  address of 1st block to be read
  * @param  blk_len : number of blocks to be read
  * @retval Status
  */
int8_t STORAGE_Read (uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
 8005304:	4613      	mov	r3, r2
 8005306:	81bb      	strh	r3, [r7, #12]
//  memcpy(buf, &g_MemoryStorage[blk_addr * BLOCK_SIZE], blk_len * BLOCK_SIZE);
  FAT16_CreateBlock(buf, blk_addr, blk_len);
 8005308:	89bb      	ldrh	r3, [r7, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	68b8      	ldr	r0, [r7, #8]
 8005310:	f7ff fc7c 	bl	8004c0c <FAT16_CreateBlock>

  return 0;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <STORAGE_Write>:
  * @param  blk_addr :  address of 1st block to be written
  * @param  blk_len : number of blocks to be read
  * @retval Status
  */
int8_t STORAGE_Write (uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	461a      	mov	r2, r3
 800532a:	4603      	mov	r3, r0
 800532c:	73fb      	strb	r3, [r7, #15]
 800532e:	4613      	mov	r3, r2
 8005330:	81bb      	strh	r3, [r7, #12]
  return (0);
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <STORAGE_GetMaxLun>:
  * @param  None
  * @retval number of logical unit
  */

int8_t STORAGE_GetMaxLun (void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return (STORAGE_LUN_NBR - 1);
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USBD_USR_Init>:
};
/**
 *
 */
void USBD_USR_Init(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0

}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USBD_USR_DeviceReset>:

void USBD_USR_DeviceReset(uint8_t speed)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	4603      	mov	r3, r0
 8005366:	71fb      	strb	r3, [r7, #7]

}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USBD_USR_DeviceConfigured>:


void USBD_USR_DeviceConfigured (void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USBD_USR_DeviceSuspended>:

void USBD_USR_DeviceSuspended(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0

}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USBD_USR_DeviceResumed>:

void USBD_USR_DeviceResumed(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0

}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <USBD_USR_DeviceConnected>:

void USBD_USR_DeviceConnected (void)
{
 800539e:	b480      	push	{r7}
 80053a0:	af00      	add	r7, sp, #0

}
 80053a2:	bf00      	nop
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USBD_USR_DeviceDisconnected>:

void USBD_USR_DeviceDisconnected (void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0

}
 80053b0:	bf00      	nop
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053be:	e003      	b.n	80053c8 <LoopCopyDataInit>

080053c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <LoopFillZerobss+0x20>)
  ldr  r3, [r3, r1]
 80053c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053c6:	3104      	adds	r1, #4

080053c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053c8:	480d      	ldr	r0, [pc, #52]	; (8005400 <LoopFillZerobss+0x24>)
  ldr  r3, =_edata
 80053ca:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <LoopFillZerobss+0x28>)
  adds  r2, r0, r1
 80053cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053d0:	d3f6      	bcc.n	80053c0 <CopyDataInit>
  ldr  r2, =_sbss
 80053d2:	4a0d      	ldr	r2, [pc, #52]	; (8005408 <LoopFillZerobss+0x2c>)
  b  LoopFillZerobss
 80053d4:	e002      	b.n	80053dc <LoopFillZerobss>

080053d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80053d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80053d8:	f842 3b04 	str.w	r3, [r2], #4

080053dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <LoopFillZerobss+0x30>)
  cmp  r2, r3
 80053de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053e0:	d3f9      	bcc.n	80053d6 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 80053e2:	480b      	ldr	r0, [pc, #44]	; (8005410 <LoopFillZerobss+0x34>)
 ldr     r1,[r0]
 80053e4:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 80053e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 80053ea:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053ec:	f7ff fca4 	bl	8004d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053f0:	f000 f812 	bl	8005418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053f4:	f7ff fc62 	bl	8004cbc <main>
  bx  lr    
 80053f8:	4770      	bx	lr
 80053fa:	0000      	.short	0x0000
  ldr  r3, =_sidata
 80053fc:	080057ec 	.word	0x080057ec
  ldr  r0, =_sdata
 8005400:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005404:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8005408:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 800540c:	20001bd0 	.word	0x20001bd0
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8005410:	e000ed88 	.word	0xe000ed88

08005414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005414:	e7fe      	b.n	8005414 <ADC_IRQHandler>
	...

08005418 <__libc_init_array>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0d      	ldr	r6, [pc, #52]	; (8005450 <__libc_init_array+0x38>)
 800541c:	4c0d      	ldr	r4, [pc, #52]	; (8005454 <__libc_init_array+0x3c>)
 800541e:	1ba4      	subs	r4, r4, r6
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	2500      	movs	r5, #0
 8005424:	42a5      	cmp	r5, r4
 8005426:	d109      	bne.n	800543c <__libc_init_array+0x24>
 8005428:	4e0b      	ldr	r6, [pc, #44]	; (8005458 <__libc_init_array+0x40>)
 800542a:	4c0c      	ldr	r4, [pc, #48]	; (800545c <__libc_init_array+0x44>)
 800542c:	f000 f9ce 	bl	80057cc <_init>
 8005430:	1ba4      	subs	r4, r4, r6
 8005432:	10a4      	asrs	r4, r4, #2
 8005434:	2500      	movs	r5, #0
 8005436:	42a5      	cmp	r5, r4
 8005438:	d105      	bne.n	8005446 <__libc_init_array+0x2e>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005440:	4798      	blx	r3
 8005442:	3501      	adds	r5, #1
 8005444:	e7ee      	b.n	8005424 <__libc_init_array+0xc>
 8005446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800544a:	4798      	blx	r3
 800544c:	3501      	adds	r5, #1
 800544e:	e7f2      	b.n	8005436 <__libc_init_array+0x1e>
 8005450:	080057e4 	.word	0x080057e4
 8005454:	080057e4 	.word	0x080057e4
 8005458:	080057e4 	.word	0x080057e4
 800545c:	080057e8 	.word	0x080057e8

08005460 <memcpy>:
 8005460:	b510      	push	{r4, lr}
 8005462:	1e43      	subs	r3, r0, #1
 8005464:	440a      	add	r2, r1
 8005466:	4291      	cmp	r1, r2
 8005468:	d100      	bne.n	800546c <memcpy+0xc>
 800546a:	bd10      	pop	{r4, pc}
 800546c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005474:	e7f7      	b.n	8005466 <memcpy+0x6>

08005476 <memset>:
 8005476:	4402      	add	r2, r0
 8005478:	4603      	mov	r3, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	d100      	bne.n	8005480 <memset+0xa>
 800547e:	4770      	bx	lr
 8005480:	f803 1b01 	strb.w	r1, [r3], #1
 8005484:	e7f9      	b.n	800547a <memset+0x4>
 8005486:	0000      	movs	r0, r0
 8005488:	6d6f7246 	.word	0x6d6f7246
 800548c:	3b6f543b 	.word	0x3b6f543b
 8005490:	676e654c 	.word	0x676e654c
 8005494:	413b6874 	.word	0x413b6874
 8005498:	756d697a 	.word	0x756d697a
 800549c:	493b6874 	.word	0x493b6874
 80054a0:	696c636e 	.word	0x696c636e
 80054a4:	6974616e 	.word	0x6974616e
 80054a8:	000a6e6f 	.word	0x000a6e6f
 80054ac:	7373614d 	.word	0x7373614d
 80054b0:	6f745320 	.word	0x6f745320
 80054b4:	65676172 	.word	0x65676172
 80054b8:	206e6920 	.word	0x206e6920
 80054bc:	4d205348 	.word	0x4d205348
 80054c0:	0065646f 	.word	0x0065646f
 80054c4:	7373614d 	.word	0x7373614d
 80054c8:	6f745320 	.word	0x6f745320
 80054cc:	65676172 	.word	0x65676172
 80054d0:	206e6920 	.word	0x206e6920
 80054d4:	4d205346 	.word	0x4d205346
 80054d8:	0065646f 	.word	0x0065646f
 80054dc:	694d5453 	.word	0x694d5453
 80054e0:	656f7263 	.word	0x656f7263
 80054e4:	7463656c 	.word	0x7463656c
 80054e8:	696e6f72 	.word	0x696e6f72
 80054ec:	00007363 	.word	0x00007363
 80054f0:	30303030 	.word	0x30303030
 80054f4:	30303030 	.word	0x30303030
 80054f8:	41313030 	.word	0x41313030
 80054fc:	00000000 	.word	0x00000000
 8005500:	30303030 	.word	0x30303030
 8005504:	30303030 	.word	0x30303030
 8005508:	42313030 	.word	0x42313030
 800550c:	00000000 	.word	0x00000000
 8005510:	2043534d 	.word	0x2043534d
 8005514:	666e6f43 	.word	0x666e6f43
 8005518:	00006769 	.word	0x00006769
 800551c:	2043534d 	.word	0x2043534d
 8005520:	65746e49 	.word	0x65746e49
 8005524:	63616672 	.word	0x63616672
 8005528:	00000065 	.word	0x00000065

0800552c <MSC_Page00_Inquiry_Data>:
 800552c:	03000000 00838000                       ........

08005534 <MSC_Mode_Sense6_data>:
	...

0800553c <MSC_Mode_Sense10_data>:
 800553c:	00000600 00000000                       ........

08005544 <g_BootRecordFAT16struct>:
 8005544:	4d903ceb 534f4453 00302e35 00010102     .<.MSDOS5.0.....
 8005554:	00008001 0002f800 00ff003f 00000081     ........?.......
 8005564:	0000ffff 00290080 43000000 41455641     ......)....CAVEA
 8005574:	4e4f5254 41462020 20363154 00002020     TRON  FAT16   ..
	...
 8005740:	aa550000                                ..U.

08005744 <g_FATSect0>:
 8005744:	fffffff8                                ....

08005748 <g_arrFatFilesTempl>:
 8005748:	45564143 4f525441 0820204e 00000000     CAVEATRON  .....
	...
 8005768:	54534554 20202031 21545854 00000000     TEST1   TXT!....
 8005778:	00000000 a35a0003 00024081 000003e8     ......Z..@......
 8005788:	54534554 20202032 21545854 00000000     TEST2   TXT!....
 8005798:	00000000 a35a0002 00024081 00000064     ......Z..@..d...

080057a8 <STORAGE_Inquirydata>:
 80057a8:	02028000 0000001f 204d5453 20202020     ........STM     
 80057b8:	65766143 6f727461 2020206e 20202020     Caveatron       
 80057c8:	30302e31                                1.00

080057cc <_init>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	bf00      	nop
 80057d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d2:	bc08      	pop	{r3}
 80057d4:	469e      	mov	lr, r3
 80057d6:	4770      	bx	lr

080057d8 <_fini>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	bf00      	nop
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr
